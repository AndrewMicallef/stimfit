Stf Module Documentation: module stf
 e.
    
    close_all(*args)
        close_all() -> bool
        
        Closes all open files.
           
        Returns:
        True if all files could be closed.
    
    close_this(*args)
        close_this() -> bool
        
        Closes the currently active file.
           
        Returns:
        True if the file could be closed.
    
    cut_traces(pt)
        Cuts the selected traces at the sampling point pt,
        and shows the cut traces in a new window.
        Returns True upon success, False upon failure.
    
    cut_traces_multi(pt_list)
        Cuts the selected traces at the sampling points
        in pt_list and shows the cut traces in a new window.
        Returns True upon success, False upon failure.
    
    erase_markers(...)
        erase_markers() -> bool
    
    file_open(*args)
        file_open(filename) -> bool
        
        Opens a file.
           
        Arguments:
        filename -- The file to be opened. On Windows, use double back-
                    slashes ("\\") between directories to avoid con-
                    version to special characters such as "\t" or "\n".
                    Example usage in Windows:
                    file_open("C:\\data\\datafile.dat")
                    Example usage in Linux:
                    file_open("/home/cs/data/datafile.dat")
                    This is surprisingly slow when called from python. 
                    Haven't figured out the reason yet.
        
        Returns:
        True if the file could be opened, False otherwise.
    
    file_save(*args)
        file_save(filename) -> bool
        
        Saves a file.
           
        Arguments:
        filename -- The file to be saved. On Windows, use double back-
                    slashes ("\\") between directories to avoid con-
                    version to special characters such as "\t" or "\n".
                    Example usage in Windows:
                    file_save("C:\\data\\datafile.dat")
                    Example usage in Linux:
                    file_save("/home/cs/data/datafile.dat")
                    This is surprisingly slow when called from python. 
                    Haven't figured out the reason yet.
        
        Returns:
        True if the file could be saved, False otherwise.
    
    foot_index(...)
        foot_index(active=True) -> double
        foot_index() -> double
        
        Returns the zero-based index of the foot of 
        an event in the active channel. The foot is the intersection of an
        interpolated line through the points of 20 and 80% rise with the
        baseline. Uses the currently measured values, i.e. does not update 
        measurements if the peak or base window cursors have changed.
           
        Arguments:
        active -- If True, returns the current index of the foot within the 
                  active channel. Only implemented for the active channel
                  at this time. Will return a negative value and show an 
                  error message if active == False.
                  
        Returns:
        The zero-based index of the foot of an event in units of sampling 
        points. Interpolates between sampling points.
        Returns a negative value upon failure.
        
        swig_ptr: _80f569b7_p_f_bool__double
    
    get_base(*args)
        get_base() -> double
        
        Returns the current baseline value. Uses the 
        currently measured values, i.e. does not update measurements if the 
        peak or base window cursors have changed.
        
        Returns:
        The current baseline.
    
    get_base_end(...)
        get_base_end(is_time=False) -> double
        get_base_end() -> double
        
        Returns the zero-based index or the time point
        of the base end cursor.
        
        Arguments:
        is_time -- If False (default), returns the zero-based index. If True,
                   returns the time from the beginning of the trace to the
                   cursor position.
    
    get_base_start(...)
        get_base_start(is_time=False) -> double
        get_base_start() -> double
        
        Returns the zero-based index or the time point
        of the base start cursor.
        
        Arguments:
        is_time -- If False (default), returns the zero-based index. If True,
                   returns the time from the beginning of the trace to the
                   cursor position.
    
    get_channel_index(...)
        get_channel_index(active=True) -> int
        get_channel_index() -> int
        
        Returns the ZERO-BASED index of the specified
        channel.
        
        Arguments:
        
        active -- If True, returns the index of the active (black) channel.
        If False, returns the index of the inactive (red) channel.
    
    get_channel_name(...)
        get_channel_name(index=-1) -> char
        get_channel_name() -> char
        
        Returns the name of the channel with the 
        specified index.
        
        Arguments:
        
        index -- The zero-based index of the channel of interest. If < 0, the
                 name of the active channel will be returned.
        
        Returns:
        the name of the channel with the specified index.
    
    get_filename(*args)
        get_filename() -> char
        
        Returns the name of the current file.
    
    get_fit_end(...)
        get_fit_end(is_time=False) -> double
        get_fit_end() -> double
        
        Returns the zero-based index or the time point
        of the fit end cursor.
        
        Arguments:
        is_time -- If False (default), returns the zero-based index. If True,
                   returns the time from the beginning of the trace to the
                   cursor position.
    
    get_fit_start(...)
        get_fit_start(is_time=False) -> double
        get_fit_start() -> double
        
        Returns the zero-based index or the time point
        of the fit start cursor.
        
        Arguments:
        is_time -- If False (default), returns the zero-based index. If True,
                   returns the time from the beginning of the trace to the
                   cursor position.
    
    get_peak(*args)
        get_peak() -> double
        
        Returns the current peak value, measured from
        zero (!). Uses the currently measured values, i.e. does not update 
        measurements if the peak or base window cursors have changed.
                 
        Returns:
        The current peak value, measured from zero (again: !).
    
    get_peak_end(...)
        get_peak_end(is_time=False) -> double
        get_peak_end() -> double
        
        Returns the zero-based index or the time point
        of the peak end cursor.
        
        Arguments:
        is_time -- If False (default), returns the zero-based index. If True,
                   returns the time from the beginning of the trace to the
                   cursor position.
    
    get_peak_start(...)
        get_peak_start(is_time=False) -> double
        get_peak_start() -> double
        
        Returns the zero-based index or the time point
        of the peak start cursor.
        
        Arguments:
        is_time -- If False (default), returns the zero-based index. If True,
                   returns the time from the beginning of the trace to the
                   cursor position.
    
    get_recording_comment(*args)
        get_recording_comment() -> string
        
        Returns a comment about the recording.
    
    get_recording_date(*args)
        get_recording_date() -> char
        
        Returns the date at which the recording was 
        started as a string.
    
    get_recording_time(*args)
        get_recording_time() -> char
        
        Returns the time at which the recording was 
        started as a string.
    
    get_sampling_interval(*args)
        get_sampling_interval() -> double
        
        Returns the sampling interval.
        
        Returns:
        The sampling interval.
    
    get_selected_indices(...)
        get_selected_indices() -> PyObject
        
        Returns a tuple with the indices (ZERO-BASED) 
        of the selected traces.
    
    get_size_channel(*args)
        get_size_channel(channel=-1) -> int
        get_size_channel() -> int
        
        Retrieves the number of traces in a channel.
        Note that at present, stimfit only supports equal-sized channels, i.e. 
        all channels within a file need to have the same number of traces. The
        channel argument is only for future extensions. 
           
        Arguments:
        channel -- ZERO-BASED index of the channel. Default value of
                   -1 will use the current channel. 
        Returns:
        The number traces in a channel.
    
    get_size_recording(*args)
        get_size_recording() -> int
        
        Retrieves the number of channels in a 
        recording.
           
        Returns:
        The number of channels in a recording.
    
    get_size_trace(*args)
        get_size_trace(trace=-1, channel=-1) -> int
        get_size_trace(trace=-1) -> int
        get_size_trace() -> int
        
        Retrieves the number of sample points of a trace.
           
        Arguments:
        trace --   ZERO-BASED index of the trace. Default value of -1
                   will use the currently displayed trace. Note that
                   this is one less than what is displayed in the drop-
                   down list.
        channel -- ZERO-BASED index of the channel. Default value of
                   -1 will use the current channel.
        Returns:
        The number of sample points.
    
    get_trace(trace=-1, channel=-1)
        Returns a trace as a 1-dimensional NumPy array.
          
        Arguments:       
        trace --   ZERO-BASED index of the trace within the channel.
                   Note that this is one less than what is shown
                   in the drop-down box.
                   The default value of -1 returns the currently
                   displayed trace.
        channel -- ZERO-BASED index of the channel. This is independent
                   of whether a channel is active or not.
                   The default value of -1 returns the currently
                   active channel.
        Returns:
        The trace as a 1D NumPy array.
    
    get_trace_index(...)
        get_trace_index() -> int
        
        Returns the ZERO-BASED index of the currently
        displayed trace (this is one less than what is shown in the combo box).
    
    get_trace_name(...)
        get_trace_name(trace=-1, channel=-1) -> char
        get_trace_name(trace=-1) -> char
        get_trace_name() -> char
        
        Returns the name of the trace with the 
        specified index.
        
        Arguments:
        trace -- The zero-based index of the trace of interest. If < 0, the
                   name of the active trace will be returned.
        channel -- The zero-based index of the channel of interest. If < 0, the
                   active channel will be used.
        
        Returns:
        the name of the trace with the specified index.
    
    get_xunits(*args)
        get_xunits(trace=-1, channel=-1) -> char
        get_xunits(trace=-1) -> char
        get_xunits() -> char
        
        Returns the x units of the specified section.
        X units are not allowed to change between sections at present, and
        they are hard-coded to "ms". This function is for future extension.
        
        
        Arguments:
        trace -- The zero-based index of the trace of interest. If < 0, the
                       name of the active trace will be returned.
        channel -- The zero-based index of the channel of interest. If < 0, the
                       active channel will be used.
        
        Returns:
        The x units as a string.
    
    get_yunits(*args)
        get_yunits(trace=-1, channel=-1) -> char
        get_yunits(trace=-1) -> char
        get_yunits() -> char
        
        Returns the y units of the specified trace.
        Y units are not allowed to change between traces at present.
        
        Arguments:
        trace -- The zero-based index of the trace of interest. If < 0, the
                       name of the active trace will be returned.
        channel -- The zero-based index of the channel of interest. If < 0, the
                       active channel will be used.
        
        Returns:
        The x units as a string.
    
    leastsq(*args)
        leastsq(fselect, refresh=True) -> PyObject
        leastsq(fselect) -> PyObject
        
        Fits a function to the data between the current
        fit cursors.
        
        Arguments:
        fselect -- Zero-based index of the function as it appears in the fit
                   selection dialog.
        refresh -- To avoid flicker during batch analysis, this may be set to
                   False so that the fitted function will not immediately
                   be drawn.
        
        Returns:
        A dictionary with the best-fit parameters and the least-squared
        error, or a null pointer upon failure.
    
    leastsq_param_size(*args)
        leastsq_param_size(fselect) -> int
        
        Retrieves the number of parameters for a
        function.
        
        Arguments:
        fselect -- Zero-based index of the function as it appears in the fit
                   selection dialog.
        
        Returns:
        The number of parameters for the function with index fselect, or a 
        negative value upon failure.
    
    maxrise_index(...)
        maxrise_index(active=True) -> double
        maxrise_index() -> double
        
        Returns the zero-based index of the maximal
        slope of rise in the specified channel. Uses the currently measured
        values, i.e. does not update measurements if the peak window cursors
        have changed.
           
        Arguments:
        active -- If True, returns the current index of the maximal slope of 
                  rise within the active channel. Otherwise, returns the 
                  current index of the maximal slope of rise within the 
                  inactive channel.
                  
        Returns:
        The zero-based index of the maximal slope of  rise in units of 
        sampling points. Interpolated between adjacent sampling points.
        Returns a negative value upon failure.
        
        swig_ptr: _30f669b7_p_f_bool__double
    
    measure(...)
        measure() -> bool
        
        Updates all measurements (e.g. peak, baseline, 
        latency) according to the current cursor settings. As if you had
        pressed "Enter" in the main window.
        Returns:
        False upon failure, True otherwise.
    
    new_window(*args)
        new_window(invec)
        
        Creates a new window showing a
        1D NumPy array.
              
        Arguments:
        invec --   The NumPy array to be shown.
    
    new_window_list(array_list)
        Creates a new window showing a sequence of
        1D NumPy arrays, or a sequence of a sequence of 1D
        NumPy arrays. As opposed to new_window_matrix(), this
        has the advantage that the arrays need not have equal sizes.
          
        Arguments:       
        array_list -- A sequence (e.g. list or tuple) of numpy arrays, or
                      a sequence of a sequence of numpy arrays.
    
    new_window_matrix(*args)
        new_window_matrix(inarr)
        
        Creates a new window showing a
        2D NumPy array.
              
        Arguments:
        inarr --   The NumPy array to be shown. First dimension
                   are the traces, second dimension the sampling
                   points within the traces.
    
    new_window_selected_all(*args)
        new_window_selected_all() -> bool
        
        Creates a new window showing the
        selected traces of all open files.
        Returns:
        True if successful.
    
    new_window_selected_this(*args)
        new_window_selected_this() -> bool
        
        Creates a new window showing the
        selected traces of the current file.
        Returns:
        True if successful.
    
    peak_index(...)
        peak_index(active=True) -> double
        peak_index() -> double
        
        Returns the zero-based index of the current
        peak position in the specified channel. Uses the currently measured
        values, i.e. does not update measurements if the peak window cursors
        have changed.
           
        Arguments:
        active -- If True, returns the current peak index of the active channel.
                  Otherwise, returns the current peak index of the inactive channel.
                  
        Returns:
        The zero-based index in units of sampling points. May be interpolated
        if more than one point is used for the peak calculation. Returns a 
        negative value upon failure.
        
        swig_ptr: _f0f669b7_p_f_bool__double
    
    select_all(*args)
        select_all()
        
        Selects all traces in the current file. Stores 
        the baseline along with the trace index.
    
    select_trace(*args)
        select_trace(trace=-1) -> bool
        select_trace() -> bool
        
        Selects a trace. Checks for out-of-range
        indices and stores the baseline along with the trace index.
           
        Arguments:
        trace --   ZERO-BASED index of the trace. Default value of -1
                   will select the currently displayed trace. Note that
                   this is one less than what is displayed in the drop-
                   down list.
        Returns:
        True if the trace could be selected, False otherwise.
    
    set_base_end(...)
        set_base_end(pos, is_time=False) -> bool
        set_base_end(pos) -> bool
        
        Sets the base end cursor to a new position.
        This will NOT update the baseline calculation. You have to either call 
        measure() or hit enter in the main window to achieve that.
        
        Arguments:
        pos --     The new cursor position, either in units of sampling points
                   if is_time == False (default) or in units of time if
                   is_time == True.
        is_time -- see above.
        
        Returns:
        False upon failure (such as out-of-range).
    
    set_base_start(...)
        set_base_start(pos, is_time=False) -> bool
        set_base_start(pos) -> bool
        
        Sets the base start cursor to a new position.
        This will NOT update the baseline calculation. You have to either call 
        measure() or hit enter in the main window to achieve that.
        
        Arguments:
        pos --     The new cursor position, either in units of sampling points
                   if is_time == False (default) or in units of time if
                   is_time == True.
        is_time -- see above.
        
        Returns:
        False upon failure (such as out-of-range).
    
    set_channel_name(...)
        set_channel_name(name, index=-1) -> bool
        set_channel_name(name) -> bool
        
        Sets the name of the channel with the 
        specified index.
        
        Arguments:
        name  -- The new name of the channel.
        index -- The zero-based index of the channel of interest. If < 0, the
                 active channel will be used.
        
        Returns:
        True upon success.
    
    set_fit_end(...)
        set_fit_end(pos, is_time=False) -> bool
        set_fit_end(pos) -> bool
        
        Sets the fit end cursor to a new position.
        
        Arguments:
        pos --     The new cursor position, either in units of sampling points
                   if is_time == False (default) or in units of time if
                   is_time == True.
        is_time -- see above.
        
        Returns:
        False upon failure (such as out-of-range).
    
    set_fit_start(...)
        set_fit_start(pos, is_time=False) -> bool
        set_fit_start(pos) -> bool
        
        Sets the fit start cursor to a new position.
        
        Arguments:
        pos --     The new cursor position, either in units of sampling points
                   if is_time == False (default) or in units of time if
                   is_time == True.
        is_time -- see above.
        
        Returns:
        False upon failure (such as out-of-range).
    
    set_marker(...)
        set_marker(x, y) -> bool
        
        Sets a marker to the specified position in the
        current trace.
        
        Arguments:
        x -- The horizontal marker position in units of sampling points.
        y -- The vertical marker position in measurement units (e.g. mV).
        
        Returns:
        False upon failure (such as out-of-range).
    
    set_peak_direction(...)
        set_peak_direction(direction) -> bool
        
        Sets the direction of the peak detection.
        
        Arguments:
        direction -- A string specifying the peak direction. Can be one of:
                     "up", "down" or "both"
        
        Returns:
        False upon failure.
    
    set_peak_end(...)
        set_peak_end(pos, is_time=False) -> bool
        set_peak_end(pos) -> bool
        
        Sets the peak end cursor to a new position.
        This will NOT update the peak calculation. You have to either call 
        measure() or hit enter in the main window to achieve that.
        
        Arguments:
        pos --     The new cursor position, either in units of sampling points
                   if is_time == False (default) or in units of time if
                   is_time == True.
        is_time -- see above.
        
        Returns:
        False upon failure (such as out-of-range).
    
    set_peak_mean(...)
        set_peak_mean(pts) -> bool
        
        Sets the number of points used for the peak 
        calculation.
        
        Arguments:
        pts -- A moving average (aka sliding, boxcar or running average) is 
               used to determine the peak value. Pts specifies the number of
               sampling points used for the moving window.
               Passing a value of -1 will calculate the average of all
               sampling points within the peak window.
        
        Returns:
        False upon failure (such as out-of-range).
    
    set_peak_start(...)
        set_peak_start(pos, is_time=False) -> bool
        set_peak_start(pos) -> bool
        
        Sets the peak start cursor to a new position.
        This will NOT update the peak calculation. You have to either call 
        measure() or hit enter in the main window to achieve that.
        
        Arguments:
        pos --     The new cursor position, either in units of sampling points
                   if is_time == False (default) or in units of time if
                   is_time == True.
        is_time -- see above.
        
        Returns:
        False upon failure (such as out-of-range).
    
    set_recording_comment(*args)
        set_recording_comment(comment) -> bool
        
        Sets a comment about the recording.
        
        Argument:
        comment -- A comment string.
        
        Returns:
        True upon successful completion.
    
    set_recording_date(*args)
        set_recording_date(date) -> bool
        
        Sets a date about the recording.
        
        Argument:
        date -- A date string.
        
        Returns:
        True upon successful completion.
    
    set_recording_time(*args)
        set_recording_time(time) -> bool
        
        Sets a time about the recording.
        
        Argument:
        time -- A time string.
        
        Returns:
        True upon successful completion.
    
    set_sampling_interval(*args)
        set_sampling_interval(si) -> bool
        
        Sets a new sampling interval.
        
        Argument:
        si --     The new sampling interval.
        
        Returns:
        False upon failure.
    
    set_trace(...)
        set_trace(trace) -> bool
        
        Sets the currently displayed trace to a new
        index. Subsequently updates all measurements (e.g. peak, base,
        latency, i.e. you don't need to call measure() yourself.)
        
        Arguments:
        trace -- The zero-based index of the new trace to be displayed.
        
        Returns:
        True upon success, false otherwise (such as out-of-range).
    
    set_xunits(*args)
        set_xunits(units, trace=-1, channel=-1) -> bool
        set_xunits(units, trace=-1) -> bool
        set_xunits(units) -> bool
        
        Sets the x unit string of the specified section.
        X units are not allowed to change between sections at present, and
        they are hard-coded to "ms". This function is for future extension.
        
        
        Arguments:
        units --   The new x unit string.
        trace --   The zero-based index of the trace of interest. If < 0, the
                       name of the active trace will be returned.
        channel -- The zero-based index of the channel of interest. If < 0, the
                       active channel will be used.
        
        Returns:
        True if successful.
    
    set_yunits(*args)
        set_yunits(units, trace=-1, channel=-1) -> bool
        set_yunits(units, trace=-1) -> bool
        set_yunits(units) -> bool
        
        Sets the y unit string of the specified trace.
        Y units are not allowed to change between traces at present.
        
        Arguments:
        units --   The new y unit string.
        trace --   The zero-based index of the trace of interest. If < 0, the
                       name of the active trace will be returned.
        channel -- The zero-based index of the channel of interest. If < 0, the
                       active channel will be used.
        
        Returns:
        True if successful.
    
    show_table(*args)
        show_table(dict, caption="Python table") -> bool
        show_table(dict) -> bool
        
        Shows a python dictionary in a results table.
        The dictionary has to have the form "string" : float
        
        Arguments:
        dict --    A dictionary with strings as key values and floating point
                   numbers as values.
        caption -- An optional caption for the table.
        
        Returns:
        True if successful.
    
    show_table_dictlist(*args)
        show_table_dictlist(dict, caption="Python table", reverse=True) -> bool
        show_table_dictlist(dict, caption="Python table") -> bool
        show_table_dictlist(dict) -> bool
        
        Shows a python dictionary in a results table.
        The dictionary has to have the form "string" : list. 
        
        Arguments:
        dict --    A dictionary with strings as key values and lists of 
                   floating point numbers as values.
        caption -- An optional caption for the table.
        reverse -- If True, The table will be filled in column-major order,
                   i.e. dictionary keys will become column titles. Setting
                   it to False has not been implemented yet.
        
        Returns:
        True if successful.
    
    subtract_base(*args)
        subtract_base() -> bool
        
        Subtracts the baseline from the selected traces
        of the current file, then displays the subtracted
        traces in a new window.
        
        Returns:
        True if the subtraction was successful, False otherwise.
    
    t50left_index(...)
        t50left_index(active=True) -> double
        t50left_index() -> double
        
        Returns the zero-based index of the left half-
        maximal amplitude of an event in the specified channel. Uses the 
        currently measured values, i.e. does not update measurements if the 
        peak or base window cursors have changed.
           
        Arguments:
        active -- If True, returns the current index of the left half-
                  maximal amplitude within the active channel. If False, 
                  returns the current index of the left half-maximal amplitude
                  within the inactive channel.
                  
        Returns:
        The zero-based index of the left half-maximal amplitude in units of 
        sampling points. Interpolates between sampling points. Returns a 
        negative value upon failure.
        
        swig_ptr: _c0f469b7_p_f_bool__double
    
    t50right_index(...)
        t50right_index(active=True) -> double
        t50right_index() -> double
        
        Returns the zero-based index of the right half-
        maximal amplitude of an event in the active channel. Uses the 
        currently measured values, i.e. does not update measurements if the 
        peak or base window cursors have changed.
           
        Arguments:
        active -- If True, returns the current index of the right half-
                  maximal amplitude within the active channel. Only 
                  implemented for the active channel at this time. Will return 
                  a negative value and show an error message if 
                  active == False.
                  
        Returns:
        The zero-based index of the right half-maximal amplitude in units of 
        sampling points. Interpolates between sampling points. Returns a 
        negative value upon failure.
        
        swig_ptr: _30f469b7_p_f_bool__double
    
    unselect_all(*args)
        unselect_all()
        
        Unselects all previously selected traces in the
        current file.

DATA
    foot_index_cb = <Swig Object of type 'double (*)(bool)' at 0xb769f580>
    maxrise_index_cb = <Swig Object of type 'double (*)(bool)' at 0xb769f6...
    peak_index_cb = <Swig Object of type 'double (*)(bool)' at 0xb769f6f0>
    t50left_index_cb = <Swig Object of type 'double (*)(bool)' at 0xb769f4...
    t50right_index_cb = <Swig Object of type 'double (*)(bool)' at 0xb769f...
