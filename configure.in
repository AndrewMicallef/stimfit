AC_INIT([stimfit],[0.8.15])
AC_CONFIG_SRCDIR(src/app/app.cpp)
AM_INIT_AUTOMAKE
AC_CONFIG_MACRO_DIR([m4])

AC_PROG_CC
AC_PROG_INSTALL

AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL
AC_PROG_CPP
AC_PROG_AWK
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_MKDIR_P
AC_PROG_CXX

BUILDDATE=`date`
CPPFLAGS=""
CXXFLAGS="-Wno-deprecated -D__UNIX__ -DSTFVERSION='\"0.8.15\"' -DSTFDATE='\"${BUILDDATE}\"'"
CFLAGS="-D__UNIX__ -DHAVE_LAPACK"

# Checks for libraries.
AC_CHECK_LIB([fftw3], [fftw_malloc], HAVE_FFTW3="yes")
if test "${HAVE_FFTW3}" != "yes" ; then
    AC_MSG_ERROR([Couldn't find fftw3.])
fi

# Checks for libraries.
AC_CHECK_LIB([hdf5], [H5Fcreate], HAVE_HDF5="yes")
if test "${HAVE_HDF5}" != "yes" ; then
    AC_MSG_ERROR([Couldn't find hdf5 libraries.])
fi

# Checks for python libraries.
AC_ARG_ENABLE([python], AC_HELP_STRING([--enable-python],[enable python console (experimental)]),[])
if test "$enable_python" = "yes" ; then
    AC_CHECK_LIB([python2.5], [Py_Main], HAVE_PYTHON="yes")
    if test "${HAVE_PYTHON}" != "yes"; then
        AC_MSG_ERROR([Enabling python requires the python 2.5 library.])
    else
        AM_PATH_PYTHON(2.5)
        AC_PROG_SWIG(1.3.17)
        SWIG_ENABLE_CXX
        SWIG_PYTHON
	AC_SUBST(SWIG)
    	CPPFLAGS="${CPPFLAGS} -DWITH_PYTHON"
    	CXXFLAGS="${CXXFLAGS}"
    	CFLAGS="${CFLAGS}"
        LIBPYTHON_LDFLAGS=$PYTHON_LDFLAGS 
        LIBPYTHON_INCLUDES=$PYTHON_CPPFLAGS
	LIBNUMPY_INCLUDES=$PYTHON_NUMPY_INCLUDE
    fi
else
    LIBPYTHON_LDFLAGS= 
    LIBPYTHON_INCLUDES= 
    LIBNUMPY_INCLUDES= 
fi
AC_SUBST(LIBPYTHON_LDFLAGS)
AC_SUBST(LIBPYTHON_INCLUDES)
AC_SUBST(LIBNUMPY_INCLUDES)
AM_CONDITIONAL(BUILD_PYTHON, test "$enable_python" = "yes")

# Optionally enables aui for doc/view architecture
AC_ARG_ENABLE([aui], AC_HELP_STRING([--enable-aui],[enable AUI for the doc/view architecture (experimental)]),[])
if test "$enable_aui" = "yes" ; then
    CPPFLAGS="${CPPFLAGS} -DWITH_AUIDOCVIEW"
fi

AC_CHECK_LIB([lapack], [dgetrf_], HAVE_LAPACK="yes")
AC_CHECK_LIB([lapack3], [dgetrf_], HAVE_LAPACK3="yes")
if test "${HAVE_LAPACK}" != "yes" ; then
    if test "${HAVE_LAPACK3}" != "yes" ; then
        AC_MSG_ERROR([Couldn't find lapack.])
    else
        LIBLAPACK_LDFLAGS=-llapack3
    fi
else
    LIBLAPACK_LDFLAGS=-llapack
fi
AC_SUBST(LIBLAPACK_LDFLAGS)

AC_ARG_ENABLE([debug],
	AC_HELP_STRING([--enable-debug],[build stimfit in debug mode]),[
])
    if test "$enable_debug" = "yes" ; then
    	CPPFLAGS="${CPPFLAGS} -D_STFDEBUG "
    	OPT_CXXFLAGS="-O0 -g3"
    	CFLAGS="${CFLAGS} -O0 -g3"
    else
    	stimfit_CXXFLAGS="${CXXFLAGS} -O2 -g"
    	OPT_CXXFLAGS="-O2 -g"
    	CFLAGS="${CFLAGS} -O2 -g"
    fi
AC_SUBST(OPT_CXXFLAGS)


WXCONFIG=wx-config
AC_ARG_WITH(wx-config,
[[  --with-wx-config=FILE     Use the given path to wx-config when determining
                            wxWidgets configuration; defaults to "wx-config"]],
[
    if test "$withval" != "yes" -a "$withval" != ""; then
        WXCONFIG=$withval
    fi
])

wxversion=0

AC_DEFUN([WXTEST],
[
	AC_REQUIRE([AC_PROG_AWK])
	AC_MSG_CHECKING([wxWidgets version])
	if wxversion=`$WXCONFIG --version`; then
		AC_MSG_RESULT([$wxversion])
	else
		AC_MSG_RESULT([not found])
		AC_MSG_ERROR([wxWidgets is required. Try --with-wx-config.])
	fi])

# Call WXTEST func
WXTEST

# Verify minimus requires
vers=`echo $wxversion | $AWK 'BEGIN { FS = "."; } { printf "% d", ($1 * 1000 + $2) * 1000 + $3;}'`
if test -n "$vers" && test "$vers" -ge 2008000; then
	WX_CPPFLAGS="`$WXCONFIG --cppflags`"
	WX_CXXFLAGS="`$WXCONFIG --cxxflags`"
	WX_LIBS="`$WXCONFIG --libs core,base,aui`"
else
	AC_MSG_ERROR([wxWidgets 2.8.0 or newer is required])
fi

CPPFLAGS="$CPPFLAGS $WX_CPPFLAGS"
CXXFLAGS="$CXXFLAGS $WX_CXXFLAGS"

AC_SUBST(WX_LIBS)

AC_CONFIG_HEADERS([stfconf.h])

AC_CONFIG_FILES([Makefile src/Makefile src/stfswig/Makefile src/app/Makefile])

AC_OUTPUT
