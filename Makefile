# Makefile.in generated by automake 1.10.2 from Makefile.am.
# Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.





pkgdatadir = $(datadir)/stimfit
pkglibdir = $(libdir)/stimfit
pkgincludedir = $(includedir)/stimfit
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
bin_PROGRAMS = stimfit$(EXEEXT)
subdir = .
DIST_COMMON = README $(am__configure_deps) $(noinst_HEADERS) \
	$(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	$(srcdir)/stfconf.h.in $(srcdir)/stimfit.plist.in \
	$(top_srcdir)/configure AUTHORS COPYING ChangeLog INSTALL NEWS \
	TODO config.guess config.sub depcomp install-sh ltmain.sh \
	missing py-compile
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
 configure.lineno config.status.lineno
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = stfconf.h
CONFIG_CLEAN_FILES = stimfit.plist
am__installdirs = "$(DESTDIR)$(bindir)"
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS)
am_stimfit_OBJECTS = stimfit-channel.$(OBJEXT) \
	stimfit-section.$(OBJEXT) stimfit-recording.$(OBJEXT) \
	stimfit-core.$(OBJEXT) stimfit-fitlib.$(OBJEXT) \
	stimfit-asciilib.$(OBJEXT) stimfit-cfslib.$(OBJEXT) \
	stimfit-hdf5lib.$(OBJEXT) cfs.$(OBJEXT) \
	stimfit-abflib.$(OBJEXT) stimfit-atflib.$(OBJEXT) \
	stimfit-axglib.$(OBJEXT) stimfit-abffiles.$(OBJEXT) \
	stimfit-csynch.$(OBJEXT) stimfit-filedesc.$(OBJEXT) \
	stimfit-FileReadCache.$(OBJEXT) stimfit-FileIO.$(OBJEXT) \
	stimfit-abfheadr.$(OBJEXT) stimfit-abfhwave.$(OBJEXT) \
	stimfit-Oldheadr.$(OBJEXT) stimfit-abfutil.$(OBJEXT) \
	stimfit-msbincvt.$(OBJEXT) unix.$(OBJEXT) \
	stimfit-abferror.$(OBJEXT) stimfit-axatffio32.$(OBJEXT) \
	stimfit-fileio2.$(OBJEXT) stimfit-ProtocolReaderABF2.$(OBJEXT) \
	stimfit-SimpleStringCache.$(OBJEXT) \
	stimfit-abf2headr.$(OBJEXT) \
	stimfit-AxoGraph_ReadWrite.$(OBJEXT) \
	stimfit-fileUtils.$(OBJEXT) stimfit-stringUtils.$(OBJEXT) \
	stimfit-byteswap.$(OBJEXT) lm.$(OBJEXT) Axb.$(OBJEXT) \
	misc.$(OBJEXT) lmlec.$(OBJEXT) lmbc.$(OBJEXT) \
	stimfit-app.$(OBJEXT) stimfit-doc.$(OBJEXT) \
	stimfit-stfcheckbox.$(OBJEXT) stimfit-copygrid.$(OBJEXT) \
	stimfit-graph.$(OBJEXT) stimfit-printout.$(OBJEXT) \
	stimfit-parentframe.$(OBJEXT) stimfit-childframe.$(OBJEXT) \
	stimfit-view.$(OBJEXT) stimfit-table.$(OBJEXT) \
	stimfit-zoom.$(OBJEXT) stimfit-cursorsdlg.$(OBJEXT) \
	stimfit-eventdlg.$(OBJEXT) stimfit-fitseldlg.$(OBJEXT) \
	stimfit-smalldlgs.$(OBJEXT) stimfit-plugins.$(OBJEXT) \
	stimfit-funclib.$(OBJEXT) stimfit-usrdlg.$(OBJEXT)
stimfit_OBJECTS = $(am_stimfit_OBJECTS)
am__DEPENDENCIES_1 = ./src/stfswig/libstf.la
stimfit_DEPENDENCIES = $(am__DEPENDENCIES_1) ./src/app/libstimfit.a
stimfit_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(stimfit_CXXFLAGS) $(CXXFLAGS) \
	$(stimfit_LDFLAGS) $(LDFLAGS) -o $@
DEFAULT_INCLUDES = -I.
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(stimfit_SOURCES)
DIST_SOURCES = $(stimfit_SOURCES)
RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \
	html-recursive info-recursive install-data-recursive \
	install-dvi-recursive install-exec-recursive \
	install-html-recursive install-info-recursive \
	install-pdf-recursive install-ps-recursive install-recursive \
	installcheck-recursive installdirs-recursive pdf-recursive \
	ps-recursive uninstall-recursive
HEADERS = $(noinst_HEADERS)
RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\
  distclean-recursive maintainer-clean-recursive
ETAGS = etags
CTAGS = ctags
DIST_SUBDIRS = $(SUBDIRS)
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
distdir = $(PACKAGE)-$(VERSION)
top_distdir = $(distdir)
am__remove_distdir = \
  { test ! -d $(distdir) \
    || { find $(distdir) -type d ! -perm -200 -exec chmod u+w {} ';' \
         && rm -fr $(distdir); }; }
DIST_ARCHIVES = $(distdir).tar.gz
GZIP_ENV = --best
distuninstallcheck_listfiles = find . -type f -print
distcleancheck_listfiles = find . -type f -print
ACLOCAL = ${SHELL} /home/nin/dev/stimfit/missing --run aclocal-1.10
AMTAR = ${SHELL} /home/nin/dev/stimfit/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /home/nin/dev/stimfit/missing --run autoconf
AUTOHEADER = ${SHELL} /home/nin/dev/stimfit/missing --run autoheader
AUTOMAKE = ${SHELL} /home/nin/dev/stimfit/missing --run automake-1.10
AWK = mawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2 -O0 -g3
CPP = gcc -E
CPPFLAGS =  -DWITH_PYTHON -D__LINUX__ -DHAVE_LAPACK  -D_STFDEBUG  -I/usr/local/lib/wx/include/gtk2-unicode-release-2.9 -I/usr/local/include/wx-2.9 -D_FILE_OFFSET_BITS=64 -DWXUSINGDLL -D__WXGTK__ -DSTFDATE='"Sun Jul  5 23:17:39 CEST 2009"'
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2 -I/usr/local/lib/wx/include/gtk2-unicode-release-2.9 -I/usr/local/include/wx-2.9 -D_FILE_OFFSET_BITS=64 -DWXUSINGDLL -D__WXGTK__ -pthread -Wall 
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FGREP = /bin/grep -F
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LD = /usr/bin/ld
LDFLAGS = 
LIBLAPACK_LDFLAGS = -llapack
LIBNUMPY_INCLUDES = -I/usr/lib/python2.5/site-packages/numpy/core/include
LIBOBJS = 
LIBPYTHON_INCLUDES = -I/usr/include/python2.5
LIBPYTHON_LDFLAGS = -L/usr/lib/python2.5 -lpython2.5
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
MACSETFILE = @true
MAKEINFO = ${SHELL} /home/nin/dev/stimfit/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OPT_CXXFLAGS = -O0 -g3
OTOOL = 
OTOOL64 = 
PACKAGE = stimfit
PACKAGE_BUGREPORT = 
PACKAGE_NAME = stimfit
PACKAGE_STRING = stimfit 0.9.0-rc5
PACKAGE_TARNAME = stimfit
PACKAGE_VERSION = 0.9.0-rc5
PATH_SEPARATOR = :
POSTLINK_COMMAND = @true
PYTHON = /usr/bin/python
PYTHON_CPPFLAGS = -I/usr/include/python2.5
PYTHON_EXTRA_LDFLAGS = -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions
PYTHON_EXTRA_LIBS =  -lpthread -ldl  -lutil
PYTHON_LDFLAGS = -L/usr/lib/python2.5 -lpython2.5
PYTHON_NUMPY_INCLUDE = -I/usr/lib/python2.5/site-packages/numpy/core/include
PYTHON_SITE_PKG = /usr/lib/python2.5/site-packages
PYTHON_VERSION = 
RANLIB = ranlib
REZ = 
SED = /bin/sed
SETFILE = 
SET_MAKE = 
SHELL = /bin/sh
STF_PYTHON_LIBNAME = libstf.so.0.0.0
STRIP = strip
SWIG = /usr/bin/swig -c++
SWIG_LIB = /usr/share/swig1.3
SWIG_PYTHON_CPPFLAGS = -I/usr/include/python2.5
SWIG_PYTHON_OPT = -python
VERSION = 0.9.0-rc5
WX_LIBS = -L/usr/local/lib -pthread   -lwx_baseu-2.9 -lwx_gtk2u_core-2.9 -lwx_gtk2u_adv-2.9 -lwx_gtk2u_aui-2.9 
abs_builddir = /home/nin/dev/stimfit
abs_srcdir = /home/nin/dev/stimfit
abs_top_builddir = /home/nin/dev/stimfit
abs_top_srcdir = /home/nin/dev/stimfit
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = $(SHELL) /home/nin/dev/stimfit/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
lt_ECHO = echo
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = 
top_builddir = .
top_srcdir = .
SUBDIRS = src
stimfit_SOURCES = ./src/core/channel.cpp ./src/core/section.cpp ./src/core/recording.cpp \
	    ./src/core/core.cpp ./src/core/fitlib.cpp ./src/core/filelib/asciilib.cpp \
	    ./src/core/filelib/cfslib.cpp ./src/core/filelib/hdf5lib.cpp ./src/core/filelib/cfs.c \
            ./src/core/filelib/abflib.cpp ./src/core/filelib/atflib.cpp ./src/core/filelib/axglib.cpp \
	    ./src/core/filelib/axon/AxAbfFio32/abffiles.cpp \
	    ./src/core/filelib/axon/AxAbfFio32/csynch.cpp \
	    ./src/core/filelib/axon/AxAbfFio32/filedesc.cpp \
	    ./src/core/filelib/axon/Common/FileReadCache.cpp \
	    ./src/core/filelib/axon/Common/FileIO.cpp \
	    ./src/core/filelib/axon/AxAbfFio32/abfheadr.cpp \
	    ./src/core/filelib/axon/AxAbfFio32/abfhwave.cpp \
	    ./src/core/filelib/axon/AxAbfFio32/Oldheadr.cpp \
	    ./src/core/filelib/axon/AxAbfFio32/abfutil.cpp \
	    ./src/core/filelib/axon/AxAbfFio32/msbincvt.cpp \
	    ./src/core/filelib/axon/Common/unix.c \
	    ./src/core/filelib/axon/AxAbfFio32/abferror.cpp \
            ./src/core/filelib/axon/AxAtfFio32/axatffio32.cpp \
            ./src/core/filelib/axon/AxAtfFio32/fileio2.cpp \
            ./src/core/filelib/axon2/ProtocolReaderABF2.cpp \
            ./src/core/filelib/axon2/SimpleStringCache.cpp \
	    ./src/core/filelib/axon2/abf2headr.cpp \
            ./src/core/filelib/axg/AxoGraph_ReadWrite.cpp \
            ./src/core/filelib/axg/fileUtils.cpp \
            ./src/core/filelib/axg/stringUtils.cpp \
            ./src/core/filelib/axg/byteswap.cpp \
            ./src/core/levmar/lm.c ./src/core/levmar/Axb.c ./src/core/levmar/misc.c ./src/core/levmar/lmlec.c ./src/core/levmar/lmbc.c \
            ./src/app/app.cpp ./src/app/doc.cpp ./src/app/stfcheckbox.cpp ./src/app/copygrid.cpp ./src/app/graph.cpp \
            ./src/app/printout.cpp ./src/app/parentframe.cpp ./src/app/childframe.cpp ./src/app/view.cpp ./src/app/table.cpp ./src/app/zoom.cpp \
            ./src/app/dlgs/cursorsdlg.cpp ./src/app/dlgs/eventdlg.cpp \
	    ./src/app/dlgs/fitseldlg.cpp ./src/app/dlgs/smalldlgs.cpp \
            ./src/app/plugins/plugins.cpp ./src/app/funclib/funclib.cpp \
            ./src/app/usrdlg/usrdlg.cpp

noinst_HEADERS = ./src/core/channel.h ./src/core/section.h ./src/core/recording.h ./src/core/core.h \
            ./src/core/stimdefs.h ./src/core/fitlib.h ./src/core/spline.h ./src/core/measlib.h \
            ./src/core/filelib/asciilib.h ./src/core/filelib/cfslib.h ./src/core/filelib/hdf5lib.h\
            ./src/core/filelib/abflib.h ./src/core/filelib/atflib.h ./src/core/filelib/axglib.h \
            ./src/core/filelib/cfs.h ./src/core/filelib/machine.h \
            ./src/core/filelib/axon/AxAbfFio32/abffiles.h \
            ./src/core/filelib/axon/AxAbfFio32/csynch.hpp \
            ./src/core/filelib/axon/AxAbfFio32/filedesc.hpp \
            ./src/core/filelib/axon/Common/FileReadCache.hpp \
            ./src/core/filelib/axon/Common/FileIO.hpp \
            ./src/core/filelib/axon/AxAbfFio32/abfheadr.h \
            ./src/core/filelib/axon/AxAbfFio32/oldheadr.h \
            ./src/core/filelib/axon/AxAbfFio32/abfutil.h \
            ./src/core/filelib/axon/AxAbfFio32/msbincvt.h \
            ./src/core/filelib/axon/Common/unix.h \
            ./src/core/filelib/axon/Common/axodefn.h \
            ./src/core/filelib/axon/Common/axodebug.h \
            ./src/core/filelib/axon/Common/wincpp.hpp \
            ./src/core/filelib/axon/AxAbfFio32/AxAbffio32.h \
            ./src/core/filelib/axon/AxAbfFio32/abfoldnx.h \
            ./src/core/filelib/axon/Common/resource.h \
            ./src/core/filelib/axon/AxAtfFio32/axatffio32.h \
            ./src/core/filelib/axon/AxAtfFio32/atfutil.h \
            ./src/core/filelib/axon/AxAtfFio32/atfintl.h \
            ./src/core/filelib/axon/Common/colors.h \
            ./src/core/filelib/axon/Common/adcdac.h \
            ./src/core/filelib/axon/Common/ArrayPtr.hpp \
            ./src/core/filelib/axon/Common/wincpp.hpp \
            ./src/core/filelib/axon2/ProtocolReaderABF2.hpp \
            ./src/core/filelib/axon2/SimpleStringCache.hpp \
            ./src/core/filelib/axon2/ProtocolStructs.h \
	    ./src/core/filelib/axon2/abf2headr.h \
	    ./src/core/filelib/axon2/abffio.h \
            ./src/core/filelib/axg/AxoGraph_ReadWrite.h \
            ./src/core/filelib/axg/fileUtils.h \
            ./src/core/filelib/axg/stringUtils.h \
            ./src/core/filelib/axg/byteswap.h \
            ./src/core/levmar/lm.h ./src/core/levmar/misc.h \
            ./src/app/app.h ./src/app/stfcheckbox.h \
            ./src/app/copygrid.h ./src/app/graph.h \
            ./src/app/printout.h \
            ./src/app/doc.h ./src/app/parentframe.h ./src/app/childframe.h ./src/app/view.h \
            ./src/app/table.h ./src/app/zoom.h \
            ./src/app/dlgs/cursorsdlg.h ./src/app/dlgs/eventdlg.h \
	    ./src/app/dlgs/fitseldlg.h ./src/app/dlgs/smalldlgs.h \
            ./src/app/plugins/plugins.h ./src/app/funclib/funclib.h \
            ./src/app/usrdlg/usrdlg.h

EXTRA_DIST = ./src/icons/16-em-down.xpm ./src/icons/16-em-open.xpm \
	./src/icons/accept.xpm ./src/icons/arrow_down.xpm \
	./src/icons/arrow_left.xpm ./src/icons/arrow_out.xpm \
	./src/icons/arrow_right.xpm ./src/icons/arrow_up.xpm \
	./src/icons/bin.xpm ./src/icons/camera.xpm ./src/icons/ch1.xpm \
	./src/icons/ch2.xpm ./src/icons/cursor.xpm \
	./src/icons/event.xpm ./src/icons/fit.xpm \
	./src/icons/fit_lim.xpm ./src/icons/latency_lim.xpm \
	./src/icons/resultset_first.xpm ./src/icons/resultset_last.xpm \
	./src/icons/resultset_next.xpm \
	./src/icons/resultset_previous.xpm ./src/icons/sum_new.xpm \
	./src/icons/sum_new_aligned.xpm ./src/icons/table.xpm \
	./src/icons/zoom.xpm ./src/icons/zoom_in.xpm \
	./src/icons/zoom_out.xpm ./src/core/levmar/Axb_core.c \
	./src/core/levmar/lmbc_core.c ./src/core/levmar/lm_core.c \
	./src/core/levmar/lmdemo.c ./src/core/levmar/lmlec_core.c \
	./src/core/levmar/misc_core.c ./src/core/levmar/LICENSE \
	./src/core/levmar/README.txt ./Doxyfile ./acsite.m4 \
	./bootstrap ./macosx/scripts/conf_mac_release.sh \
	./macosx/scripts/conf_mac_debug.sh \
	./macosx/scripts/change_deps_release.sh ./macosx/app.r \
	./macosx/wxmac.icns
#PYTHON_ADDINCLUDES = 
PYTHON_ADDINCLUDES = $(LIBPYTHON_INCLUDES)
#PYTHON_ADDLDFLAGS = 
PYTHON_ADDLDFLAGS = $(LIBPYTHON_LDFLAGS)
#PYTHON_ADDLIBS = 
PYTHON_ADDLIBS = ./src/stfswig/libstf.la
INCLUDES = $(PYTHON_ADDINCLUDES)
stimfit_CXXFLAGS = $(OPT_CXXFLAGS)
stimfit_LDFLAGS = $(WX_LIBS) $(LIBLAPACK_LDFLAGS) -lfftw3 -lhdf5 -lhdf5_hl $(PYTHON_ADDLDFLAGS)
stimfit_LDADD = $(PYTHON_ADDLIBS) ./src/app/libstimfit.a
all: stfconf.h
	$(MAKE) $(AM_MAKEFLAGS) all-recursive

.SUFFIXES:
.SUFFIXES: .c .cpp .lo .o .obj
am--refresh:
	@:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      echo ' cd $(srcdir) && $(AUTOMAKE) --foreign '; \
	      cd $(srcdir) && $(AUTOMAKE) --foreign  \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    echo ' $(SHELL) ./config.status'; \
	    $(SHELL) ./config.status;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	$(SHELL) ./config.status --recheck

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(srcdir) && $(AUTOCONF)
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(srcdir) && $(ACLOCAL) $(ACLOCAL_AMFLAGS)

stfconf.h: stamp-h1
	@if test ! -f $@; then \
	  rm -f stamp-h1; \
	  $(MAKE) $(AM_MAKEFLAGS) stamp-h1; \
	else :; fi

stamp-h1: $(srcdir)/stfconf.h.in $(top_builddir)/config.status
	@rm -f stamp-h1
	cd $(top_builddir) && $(SHELL) ./config.status stfconf.h
$(srcdir)/stfconf.h.in:  $(am__configure_deps) 
	cd $(top_srcdir) && $(AUTOHEADER)
	rm -f stamp-h1
	touch $@

distclean-hdr:
	-rm -f stfconf.h stamp-h1
stimfit.plist: $(top_builddir)/config.status $(srcdir)/stimfit.plist.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	     || test -f $$p1 \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
stimfit$(EXEEXT): $(stimfit_OBJECTS) $(stimfit_DEPENDENCIES) 
	@rm -f stimfit$(EXEEXT)
	$(stimfit_LINK) $(stimfit_OBJECTS) $(stimfit_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/Axb.Po
include ./$(DEPDIR)/cfs.Po
include ./$(DEPDIR)/lm.Po
include ./$(DEPDIR)/lmbc.Po
include ./$(DEPDIR)/lmlec.Po
include ./$(DEPDIR)/misc.Po
include ./$(DEPDIR)/stimfit-AxoGraph_ReadWrite.Po
include ./$(DEPDIR)/stimfit-FileIO.Po
include ./$(DEPDIR)/stimfit-FileReadCache.Po
include ./$(DEPDIR)/stimfit-Oldheadr.Po
include ./$(DEPDIR)/stimfit-ProtocolReaderABF2.Po
include ./$(DEPDIR)/stimfit-SimpleStringCache.Po
include ./$(DEPDIR)/stimfit-abf2headr.Po
include ./$(DEPDIR)/stimfit-abferror.Po
include ./$(DEPDIR)/stimfit-abffiles.Po
include ./$(DEPDIR)/stimfit-abfheadr.Po
include ./$(DEPDIR)/stimfit-abfhwave.Po
include ./$(DEPDIR)/stimfit-abflib.Po
include ./$(DEPDIR)/stimfit-abfutil.Po
include ./$(DEPDIR)/stimfit-app.Po
include ./$(DEPDIR)/stimfit-asciilib.Po
include ./$(DEPDIR)/stimfit-atflib.Po
include ./$(DEPDIR)/stimfit-axatffio32.Po
include ./$(DEPDIR)/stimfit-axglib.Po
include ./$(DEPDIR)/stimfit-byteswap.Po
include ./$(DEPDIR)/stimfit-cfslib.Po
include ./$(DEPDIR)/stimfit-channel.Po
include ./$(DEPDIR)/stimfit-childframe.Po
include ./$(DEPDIR)/stimfit-copygrid.Po
include ./$(DEPDIR)/stimfit-core.Po
include ./$(DEPDIR)/stimfit-csynch.Po
include ./$(DEPDIR)/stimfit-cursorsdlg.Po
include ./$(DEPDIR)/stimfit-doc.Po
include ./$(DEPDIR)/stimfit-eventdlg.Po
include ./$(DEPDIR)/stimfit-fileUtils.Po
include ./$(DEPDIR)/stimfit-filedesc.Po
include ./$(DEPDIR)/stimfit-fileio2.Po
include ./$(DEPDIR)/stimfit-fitlib.Po
include ./$(DEPDIR)/stimfit-fitseldlg.Po
include ./$(DEPDIR)/stimfit-funclib.Po
include ./$(DEPDIR)/stimfit-graph.Po
include ./$(DEPDIR)/stimfit-hdf5lib.Po
include ./$(DEPDIR)/stimfit-msbincvt.Po
include ./$(DEPDIR)/stimfit-parentframe.Po
include ./$(DEPDIR)/stimfit-plugins.Po
include ./$(DEPDIR)/stimfit-printout.Po
include ./$(DEPDIR)/stimfit-recording.Po
include ./$(DEPDIR)/stimfit-section.Po
include ./$(DEPDIR)/stimfit-smalldlgs.Po
include ./$(DEPDIR)/stimfit-stfcheckbox.Po
include ./$(DEPDIR)/stimfit-stringUtils.Po
include ./$(DEPDIR)/stimfit-table.Po
include ./$(DEPDIR)/stimfit-usrdlg.Po
include ./$(DEPDIR)/stimfit-view.Po
include ./$(DEPDIR)/stimfit-zoom.Po
include ./$(DEPDIR)/unix.Po

.c.o:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
	$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<

cfs.o: ./src/core/filelib/cfs.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT cfs.o -MD -MP -MF $(DEPDIR)/cfs.Tpo -c -o cfs.o `test -f './src/core/filelib/cfs.c' || echo '$(srcdir)/'`./src/core/filelib/cfs.c
	mv -f $(DEPDIR)/cfs.Tpo $(DEPDIR)/cfs.Po
#	source='./src/core/filelib/cfs.c' object='cfs.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o cfs.o `test -f './src/core/filelib/cfs.c' || echo '$(srcdir)/'`./src/core/filelib/cfs.c

cfs.obj: ./src/core/filelib/cfs.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT cfs.obj -MD -MP -MF $(DEPDIR)/cfs.Tpo -c -o cfs.obj `if test -f './src/core/filelib/cfs.c'; then $(CYGPATH_W) './src/core/filelib/cfs.c'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/cfs.c'; fi`
	mv -f $(DEPDIR)/cfs.Tpo $(DEPDIR)/cfs.Po
#	source='./src/core/filelib/cfs.c' object='cfs.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o cfs.obj `if test -f './src/core/filelib/cfs.c'; then $(CYGPATH_W) './src/core/filelib/cfs.c'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/cfs.c'; fi`

unix.o: ./src/core/filelib/axon/Common/unix.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT unix.o -MD -MP -MF $(DEPDIR)/unix.Tpo -c -o unix.o `test -f './src/core/filelib/axon/Common/unix.c' || echo '$(srcdir)/'`./src/core/filelib/axon/Common/unix.c
	mv -f $(DEPDIR)/unix.Tpo $(DEPDIR)/unix.Po
#	source='./src/core/filelib/axon/Common/unix.c' object='unix.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o unix.o `test -f './src/core/filelib/axon/Common/unix.c' || echo '$(srcdir)/'`./src/core/filelib/axon/Common/unix.c

unix.obj: ./src/core/filelib/axon/Common/unix.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT unix.obj -MD -MP -MF $(DEPDIR)/unix.Tpo -c -o unix.obj `if test -f './src/core/filelib/axon/Common/unix.c'; then $(CYGPATH_W) './src/core/filelib/axon/Common/unix.c'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/Common/unix.c'; fi`
	mv -f $(DEPDIR)/unix.Tpo $(DEPDIR)/unix.Po
#	source='./src/core/filelib/axon/Common/unix.c' object='unix.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o unix.obj `if test -f './src/core/filelib/axon/Common/unix.c'; then $(CYGPATH_W) './src/core/filelib/axon/Common/unix.c'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/Common/unix.c'; fi`

lm.o: ./src/core/levmar/lm.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT lm.o -MD -MP -MF $(DEPDIR)/lm.Tpo -c -o lm.o `test -f './src/core/levmar/lm.c' || echo '$(srcdir)/'`./src/core/levmar/lm.c
	mv -f $(DEPDIR)/lm.Tpo $(DEPDIR)/lm.Po
#	source='./src/core/levmar/lm.c' object='lm.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o lm.o `test -f './src/core/levmar/lm.c' || echo '$(srcdir)/'`./src/core/levmar/lm.c

lm.obj: ./src/core/levmar/lm.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT lm.obj -MD -MP -MF $(DEPDIR)/lm.Tpo -c -o lm.obj `if test -f './src/core/levmar/lm.c'; then $(CYGPATH_W) './src/core/levmar/lm.c'; else $(CYGPATH_W) '$(srcdir)/./src/core/levmar/lm.c'; fi`
	mv -f $(DEPDIR)/lm.Tpo $(DEPDIR)/lm.Po
#	source='./src/core/levmar/lm.c' object='lm.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o lm.obj `if test -f './src/core/levmar/lm.c'; then $(CYGPATH_W) './src/core/levmar/lm.c'; else $(CYGPATH_W) '$(srcdir)/./src/core/levmar/lm.c'; fi`

Axb.o: ./src/core/levmar/Axb.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT Axb.o -MD -MP -MF $(DEPDIR)/Axb.Tpo -c -o Axb.o `test -f './src/core/levmar/Axb.c' || echo '$(srcdir)/'`./src/core/levmar/Axb.c
	mv -f $(DEPDIR)/Axb.Tpo $(DEPDIR)/Axb.Po
#	source='./src/core/levmar/Axb.c' object='Axb.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o Axb.o `test -f './src/core/levmar/Axb.c' || echo '$(srcdir)/'`./src/core/levmar/Axb.c

Axb.obj: ./src/core/levmar/Axb.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT Axb.obj -MD -MP -MF $(DEPDIR)/Axb.Tpo -c -o Axb.obj `if test -f './src/core/levmar/Axb.c'; then $(CYGPATH_W) './src/core/levmar/Axb.c'; else $(CYGPATH_W) '$(srcdir)/./src/core/levmar/Axb.c'; fi`
	mv -f $(DEPDIR)/Axb.Tpo $(DEPDIR)/Axb.Po
#	source='./src/core/levmar/Axb.c' object='Axb.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o Axb.obj `if test -f './src/core/levmar/Axb.c'; then $(CYGPATH_W) './src/core/levmar/Axb.c'; else $(CYGPATH_W) '$(srcdir)/./src/core/levmar/Axb.c'; fi`

misc.o: ./src/core/levmar/misc.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT misc.o -MD -MP -MF $(DEPDIR)/misc.Tpo -c -o misc.o `test -f './src/core/levmar/misc.c' || echo '$(srcdir)/'`./src/core/levmar/misc.c
	mv -f $(DEPDIR)/misc.Tpo $(DEPDIR)/misc.Po
#	source='./src/core/levmar/misc.c' object='misc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o misc.o `test -f './src/core/levmar/misc.c' || echo '$(srcdir)/'`./src/core/levmar/misc.c

misc.obj: ./src/core/levmar/misc.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT misc.obj -MD -MP -MF $(DEPDIR)/misc.Tpo -c -o misc.obj `if test -f './src/core/levmar/misc.c'; then $(CYGPATH_W) './src/core/levmar/misc.c'; else $(CYGPATH_W) '$(srcdir)/./src/core/levmar/misc.c'; fi`
	mv -f $(DEPDIR)/misc.Tpo $(DEPDIR)/misc.Po
#	source='./src/core/levmar/misc.c' object='misc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o misc.obj `if test -f './src/core/levmar/misc.c'; then $(CYGPATH_W) './src/core/levmar/misc.c'; else $(CYGPATH_W) '$(srcdir)/./src/core/levmar/misc.c'; fi`

lmlec.o: ./src/core/levmar/lmlec.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT lmlec.o -MD -MP -MF $(DEPDIR)/lmlec.Tpo -c -o lmlec.o `test -f './src/core/levmar/lmlec.c' || echo '$(srcdir)/'`./src/core/levmar/lmlec.c
	mv -f $(DEPDIR)/lmlec.Tpo $(DEPDIR)/lmlec.Po
#	source='./src/core/levmar/lmlec.c' object='lmlec.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o lmlec.o `test -f './src/core/levmar/lmlec.c' || echo '$(srcdir)/'`./src/core/levmar/lmlec.c

lmlec.obj: ./src/core/levmar/lmlec.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT lmlec.obj -MD -MP -MF $(DEPDIR)/lmlec.Tpo -c -o lmlec.obj `if test -f './src/core/levmar/lmlec.c'; then $(CYGPATH_W) './src/core/levmar/lmlec.c'; else $(CYGPATH_W) '$(srcdir)/./src/core/levmar/lmlec.c'; fi`
	mv -f $(DEPDIR)/lmlec.Tpo $(DEPDIR)/lmlec.Po
#	source='./src/core/levmar/lmlec.c' object='lmlec.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o lmlec.obj `if test -f './src/core/levmar/lmlec.c'; then $(CYGPATH_W) './src/core/levmar/lmlec.c'; else $(CYGPATH_W) '$(srcdir)/./src/core/levmar/lmlec.c'; fi`

lmbc.o: ./src/core/levmar/lmbc.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT lmbc.o -MD -MP -MF $(DEPDIR)/lmbc.Tpo -c -o lmbc.o `test -f './src/core/levmar/lmbc.c' || echo '$(srcdir)/'`./src/core/levmar/lmbc.c
	mv -f $(DEPDIR)/lmbc.Tpo $(DEPDIR)/lmbc.Po
#	source='./src/core/levmar/lmbc.c' object='lmbc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o lmbc.o `test -f './src/core/levmar/lmbc.c' || echo '$(srcdir)/'`./src/core/levmar/lmbc.c

lmbc.obj: ./src/core/levmar/lmbc.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT lmbc.obj -MD -MP -MF $(DEPDIR)/lmbc.Tpo -c -o lmbc.obj `if test -f './src/core/levmar/lmbc.c'; then $(CYGPATH_W) './src/core/levmar/lmbc.c'; else $(CYGPATH_W) '$(srcdir)/./src/core/levmar/lmbc.c'; fi`
	mv -f $(DEPDIR)/lmbc.Tpo $(DEPDIR)/lmbc.Po
#	source='./src/core/levmar/lmbc.c' object='lmbc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o lmbc.obj `if test -f './src/core/levmar/lmbc.c'; then $(CYGPATH_W) './src/core/levmar/lmbc.c'; else $(CYGPATH_W) '$(srcdir)/./src/core/levmar/lmbc.c'; fi`

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ $<

stimfit-channel.o: ./src/core/channel.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-channel.o -MD -MP -MF $(DEPDIR)/stimfit-channel.Tpo -c -o stimfit-channel.o `test -f './src/core/channel.cpp' || echo '$(srcdir)/'`./src/core/channel.cpp
	mv -f $(DEPDIR)/stimfit-channel.Tpo $(DEPDIR)/stimfit-channel.Po
#	source='./src/core/channel.cpp' object='stimfit-channel.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-channel.o `test -f './src/core/channel.cpp' || echo '$(srcdir)/'`./src/core/channel.cpp

stimfit-channel.obj: ./src/core/channel.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-channel.obj -MD -MP -MF $(DEPDIR)/stimfit-channel.Tpo -c -o stimfit-channel.obj `if test -f './src/core/channel.cpp'; then $(CYGPATH_W) './src/core/channel.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/channel.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-channel.Tpo $(DEPDIR)/stimfit-channel.Po
#	source='./src/core/channel.cpp' object='stimfit-channel.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-channel.obj `if test -f './src/core/channel.cpp'; then $(CYGPATH_W) './src/core/channel.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/channel.cpp'; fi`

stimfit-section.o: ./src/core/section.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-section.o -MD -MP -MF $(DEPDIR)/stimfit-section.Tpo -c -o stimfit-section.o `test -f './src/core/section.cpp' || echo '$(srcdir)/'`./src/core/section.cpp
	mv -f $(DEPDIR)/stimfit-section.Tpo $(DEPDIR)/stimfit-section.Po
#	source='./src/core/section.cpp' object='stimfit-section.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-section.o `test -f './src/core/section.cpp' || echo '$(srcdir)/'`./src/core/section.cpp

stimfit-section.obj: ./src/core/section.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-section.obj -MD -MP -MF $(DEPDIR)/stimfit-section.Tpo -c -o stimfit-section.obj `if test -f './src/core/section.cpp'; then $(CYGPATH_W) './src/core/section.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/section.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-section.Tpo $(DEPDIR)/stimfit-section.Po
#	source='./src/core/section.cpp' object='stimfit-section.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-section.obj `if test -f './src/core/section.cpp'; then $(CYGPATH_W) './src/core/section.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/section.cpp'; fi`

stimfit-recording.o: ./src/core/recording.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-recording.o -MD -MP -MF $(DEPDIR)/stimfit-recording.Tpo -c -o stimfit-recording.o `test -f './src/core/recording.cpp' || echo '$(srcdir)/'`./src/core/recording.cpp
	mv -f $(DEPDIR)/stimfit-recording.Tpo $(DEPDIR)/stimfit-recording.Po
#	source='./src/core/recording.cpp' object='stimfit-recording.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-recording.o `test -f './src/core/recording.cpp' || echo '$(srcdir)/'`./src/core/recording.cpp

stimfit-recording.obj: ./src/core/recording.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-recording.obj -MD -MP -MF $(DEPDIR)/stimfit-recording.Tpo -c -o stimfit-recording.obj `if test -f './src/core/recording.cpp'; then $(CYGPATH_W) './src/core/recording.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/recording.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-recording.Tpo $(DEPDIR)/stimfit-recording.Po
#	source='./src/core/recording.cpp' object='stimfit-recording.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-recording.obj `if test -f './src/core/recording.cpp'; then $(CYGPATH_W) './src/core/recording.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/recording.cpp'; fi`

stimfit-core.o: ./src/core/core.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-core.o -MD -MP -MF $(DEPDIR)/stimfit-core.Tpo -c -o stimfit-core.o `test -f './src/core/core.cpp' || echo '$(srcdir)/'`./src/core/core.cpp
	mv -f $(DEPDIR)/stimfit-core.Tpo $(DEPDIR)/stimfit-core.Po
#	source='./src/core/core.cpp' object='stimfit-core.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-core.o `test -f './src/core/core.cpp' || echo '$(srcdir)/'`./src/core/core.cpp

stimfit-core.obj: ./src/core/core.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-core.obj -MD -MP -MF $(DEPDIR)/stimfit-core.Tpo -c -o stimfit-core.obj `if test -f './src/core/core.cpp'; then $(CYGPATH_W) './src/core/core.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/core.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-core.Tpo $(DEPDIR)/stimfit-core.Po
#	source='./src/core/core.cpp' object='stimfit-core.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-core.obj `if test -f './src/core/core.cpp'; then $(CYGPATH_W) './src/core/core.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/core.cpp'; fi`

stimfit-fitlib.o: ./src/core/fitlib.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-fitlib.o -MD -MP -MF $(DEPDIR)/stimfit-fitlib.Tpo -c -o stimfit-fitlib.o `test -f './src/core/fitlib.cpp' || echo '$(srcdir)/'`./src/core/fitlib.cpp
	mv -f $(DEPDIR)/stimfit-fitlib.Tpo $(DEPDIR)/stimfit-fitlib.Po
#	source='./src/core/fitlib.cpp' object='stimfit-fitlib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-fitlib.o `test -f './src/core/fitlib.cpp' || echo '$(srcdir)/'`./src/core/fitlib.cpp

stimfit-fitlib.obj: ./src/core/fitlib.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-fitlib.obj -MD -MP -MF $(DEPDIR)/stimfit-fitlib.Tpo -c -o stimfit-fitlib.obj `if test -f './src/core/fitlib.cpp'; then $(CYGPATH_W) './src/core/fitlib.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/fitlib.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-fitlib.Tpo $(DEPDIR)/stimfit-fitlib.Po
#	source='./src/core/fitlib.cpp' object='stimfit-fitlib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-fitlib.obj `if test -f './src/core/fitlib.cpp'; then $(CYGPATH_W) './src/core/fitlib.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/fitlib.cpp'; fi`

stimfit-asciilib.o: ./src/core/filelib/asciilib.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-asciilib.o -MD -MP -MF $(DEPDIR)/stimfit-asciilib.Tpo -c -o stimfit-asciilib.o `test -f './src/core/filelib/asciilib.cpp' || echo '$(srcdir)/'`./src/core/filelib/asciilib.cpp
	mv -f $(DEPDIR)/stimfit-asciilib.Tpo $(DEPDIR)/stimfit-asciilib.Po
#	source='./src/core/filelib/asciilib.cpp' object='stimfit-asciilib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-asciilib.o `test -f './src/core/filelib/asciilib.cpp' || echo '$(srcdir)/'`./src/core/filelib/asciilib.cpp

stimfit-asciilib.obj: ./src/core/filelib/asciilib.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-asciilib.obj -MD -MP -MF $(DEPDIR)/stimfit-asciilib.Tpo -c -o stimfit-asciilib.obj `if test -f './src/core/filelib/asciilib.cpp'; then $(CYGPATH_W) './src/core/filelib/asciilib.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/asciilib.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-asciilib.Tpo $(DEPDIR)/stimfit-asciilib.Po
#	source='./src/core/filelib/asciilib.cpp' object='stimfit-asciilib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-asciilib.obj `if test -f './src/core/filelib/asciilib.cpp'; then $(CYGPATH_W) './src/core/filelib/asciilib.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/asciilib.cpp'; fi`

stimfit-cfslib.o: ./src/core/filelib/cfslib.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-cfslib.o -MD -MP -MF $(DEPDIR)/stimfit-cfslib.Tpo -c -o stimfit-cfslib.o `test -f './src/core/filelib/cfslib.cpp' || echo '$(srcdir)/'`./src/core/filelib/cfslib.cpp
	mv -f $(DEPDIR)/stimfit-cfslib.Tpo $(DEPDIR)/stimfit-cfslib.Po
#	source='./src/core/filelib/cfslib.cpp' object='stimfit-cfslib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-cfslib.o `test -f './src/core/filelib/cfslib.cpp' || echo '$(srcdir)/'`./src/core/filelib/cfslib.cpp

stimfit-cfslib.obj: ./src/core/filelib/cfslib.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-cfslib.obj -MD -MP -MF $(DEPDIR)/stimfit-cfslib.Tpo -c -o stimfit-cfslib.obj `if test -f './src/core/filelib/cfslib.cpp'; then $(CYGPATH_W) './src/core/filelib/cfslib.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/cfslib.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-cfslib.Tpo $(DEPDIR)/stimfit-cfslib.Po
#	source='./src/core/filelib/cfslib.cpp' object='stimfit-cfslib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-cfslib.obj `if test -f './src/core/filelib/cfslib.cpp'; then $(CYGPATH_W) './src/core/filelib/cfslib.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/cfslib.cpp'; fi`

stimfit-hdf5lib.o: ./src/core/filelib/hdf5lib.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-hdf5lib.o -MD -MP -MF $(DEPDIR)/stimfit-hdf5lib.Tpo -c -o stimfit-hdf5lib.o `test -f './src/core/filelib/hdf5lib.cpp' || echo '$(srcdir)/'`./src/core/filelib/hdf5lib.cpp
	mv -f $(DEPDIR)/stimfit-hdf5lib.Tpo $(DEPDIR)/stimfit-hdf5lib.Po
#	source='./src/core/filelib/hdf5lib.cpp' object='stimfit-hdf5lib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-hdf5lib.o `test -f './src/core/filelib/hdf5lib.cpp' || echo '$(srcdir)/'`./src/core/filelib/hdf5lib.cpp

stimfit-hdf5lib.obj: ./src/core/filelib/hdf5lib.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-hdf5lib.obj -MD -MP -MF $(DEPDIR)/stimfit-hdf5lib.Tpo -c -o stimfit-hdf5lib.obj `if test -f './src/core/filelib/hdf5lib.cpp'; then $(CYGPATH_W) './src/core/filelib/hdf5lib.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/hdf5lib.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-hdf5lib.Tpo $(DEPDIR)/stimfit-hdf5lib.Po
#	source='./src/core/filelib/hdf5lib.cpp' object='stimfit-hdf5lib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-hdf5lib.obj `if test -f './src/core/filelib/hdf5lib.cpp'; then $(CYGPATH_W) './src/core/filelib/hdf5lib.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/hdf5lib.cpp'; fi`

stimfit-abflib.o: ./src/core/filelib/abflib.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-abflib.o -MD -MP -MF $(DEPDIR)/stimfit-abflib.Tpo -c -o stimfit-abflib.o `test -f './src/core/filelib/abflib.cpp' || echo '$(srcdir)/'`./src/core/filelib/abflib.cpp
	mv -f $(DEPDIR)/stimfit-abflib.Tpo $(DEPDIR)/stimfit-abflib.Po
#	source='./src/core/filelib/abflib.cpp' object='stimfit-abflib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-abflib.o `test -f './src/core/filelib/abflib.cpp' || echo '$(srcdir)/'`./src/core/filelib/abflib.cpp

stimfit-abflib.obj: ./src/core/filelib/abflib.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-abflib.obj -MD -MP -MF $(DEPDIR)/stimfit-abflib.Tpo -c -o stimfit-abflib.obj `if test -f './src/core/filelib/abflib.cpp'; then $(CYGPATH_W) './src/core/filelib/abflib.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/abflib.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-abflib.Tpo $(DEPDIR)/stimfit-abflib.Po
#	source='./src/core/filelib/abflib.cpp' object='stimfit-abflib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-abflib.obj `if test -f './src/core/filelib/abflib.cpp'; then $(CYGPATH_W) './src/core/filelib/abflib.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/abflib.cpp'; fi`

stimfit-atflib.o: ./src/core/filelib/atflib.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-atflib.o -MD -MP -MF $(DEPDIR)/stimfit-atflib.Tpo -c -o stimfit-atflib.o `test -f './src/core/filelib/atflib.cpp' || echo '$(srcdir)/'`./src/core/filelib/atflib.cpp
	mv -f $(DEPDIR)/stimfit-atflib.Tpo $(DEPDIR)/stimfit-atflib.Po
#	source='./src/core/filelib/atflib.cpp' object='stimfit-atflib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-atflib.o `test -f './src/core/filelib/atflib.cpp' || echo '$(srcdir)/'`./src/core/filelib/atflib.cpp

stimfit-atflib.obj: ./src/core/filelib/atflib.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-atflib.obj -MD -MP -MF $(DEPDIR)/stimfit-atflib.Tpo -c -o stimfit-atflib.obj `if test -f './src/core/filelib/atflib.cpp'; then $(CYGPATH_W) './src/core/filelib/atflib.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/atflib.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-atflib.Tpo $(DEPDIR)/stimfit-atflib.Po
#	source='./src/core/filelib/atflib.cpp' object='stimfit-atflib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-atflib.obj `if test -f './src/core/filelib/atflib.cpp'; then $(CYGPATH_W) './src/core/filelib/atflib.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/atflib.cpp'; fi`

stimfit-axglib.o: ./src/core/filelib/axglib.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-axglib.o -MD -MP -MF $(DEPDIR)/stimfit-axglib.Tpo -c -o stimfit-axglib.o `test -f './src/core/filelib/axglib.cpp' || echo '$(srcdir)/'`./src/core/filelib/axglib.cpp
	mv -f $(DEPDIR)/stimfit-axglib.Tpo $(DEPDIR)/stimfit-axglib.Po
#	source='./src/core/filelib/axglib.cpp' object='stimfit-axglib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-axglib.o `test -f './src/core/filelib/axglib.cpp' || echo '$(srcdir)/'`./src/core/filelib/axglib.cpp

stimfit-axglib.obj: ./src/core/filelib/axglib.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-axglib.obj -MD -MP -MF $(DEPDIR)/stimfit-axglib.Tpo -c -o stimfit-axglib.obj `if test -f './src/core/filelib/axglib.cpp'; then $(CYGPATH_W) './src/core/filelib/axglib.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axglib.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-axglib.Tpo $(DEPDIR)/stimfit-axglib.Po
#	source='./src/core/filelib/axglib.cpp' object='stimfit-axglib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-axglib.obj `if test -f './src/core/filelib/axglib.cpp'; then $(CYGPATH_W) './src/core/filelib/axglib.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axglib.cpp'; fi`

stimfit-abffiles.o: ./src/core/filelib/axon/AxAbfFio32/abffiles.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-abffiles.o -MD -MP -MF $(DEPDIR)/stimfit-abffiles.Tpo -c -o stimfit-abffiles.o `test -f './src/core/filelib/axon/AxAbfFio32/abffiles.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon/AxAbfFio32/abffiles.cpp
	mv -f $(DEPDIR)/stimfit-abffiles.Tpo $(DEPDIR)/stimfit-abffiles.Po
#	source='./src/core/filelib/axon/AxAbfFio32/abffiles.cpp' object='stimfit-abffiles.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-abffiles.o `test -f './src/core/filelib/axon/AxAbfFio32/abffiles.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon/AxAbfFio32/abffiles.cpp

stimfit-abffiles.obj: ./src/core/filelib/axon/AxAbfFio32/abffiles.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-abffiles.obj -MD -MP -MF $(DEPDIR)/stimfit-abffiles.Tpo -c -o stimfit-abffiles.obj `if test -f './src/core/filelib/axon/AxAbfFio32/abffiles.cpp'; then $(CYGPATH_W) './src/core/filelib/axon/AxAbfFio32/abffiles.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/AxAbfFio32/abffiles.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-abffiles.Tpo $(DEPDIR)/stimfit-abffiles.Po
#	source='./src/core/filelib/axon/AxAbfFio32/abffiles.cpp' object='stimfit-abffiles.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-abffiles.obj `if test -f './src/core/filelib/axon/AxAbfFio32/abffiles.cpp'; then $(CYGPATH_W) './src/core/filelib/axon/AxAbfFio32/abffiles.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/AxAbfFio32/abffiles.cpp'; fi`

stimfit-csynch.o: ./src/core/filelib/axon/AxAbfFio32/csynch.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-csynch.o -MD -MP -MF $(DEPDIR)/stimfit-csynch.Tpo -c -o stimfit-csynch.o `test -f './src/core/filelib/axon/AxAbfFio32/csynch.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon/AxAbfFio32/csynch.cpp
	mv -f $(DEPDIR)/stimfit-csynch.Tpo $(DEPDIR)/stimfit-csynch.Po
#	source='./src/core/filelib/axon/AxAbfFio32/csynch.cpp' object='stimfit-csynch.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-csynch.o `test -f './src/core/filelib/axon/AxAbfFio32/csynch.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon/AxAbfFio32/csynch.cpp

stimfit-csynch.obj: ./src/core/filelib/axon/AxAbfFio32/csynch.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-csynch.obj -MD -MP -MF $(DEPDIR)/stimfit-csynch.Tpo -c -o stimfit-csynch.obj `if test -f './src/core/filelib/axon/AxAbfFio32/csynch.cpp'; then $(CYGPATH_W) './src/core/filelib/axon/AxAbfFio32/csynch.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/AxAbfFio32/csynch.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-csynch.Tpo $(DEPDIR)/stimfit-csynch.Po
#	source='./src/core/filelib/axon/AxAbfFio32/csynch.cpp' object='stimfit-csynch.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-csynch.obj `if test -f './src/core/filelib/axon/AxAbfFio32/csynch.cpp'; then $(CYGPATH_W) './src/core/filelib/axon/AxAbfFio32/csynch.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/AxAbfFio32/csynch.cpp'; fi`

stimfit-filedesc.o: ./src/core/filelib/axon/AxAbfFio32/filedesc.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-filedesc.o -MD -MP -MF $(DEPDIR)/stimfit-filedesc.Tpo -c -o stimfit-filedesc.o `test -f './src/core/filelib/axon/AxAbfFio32/filedesc.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon/AxAbfFio32/filedesc.cpp
	mv -f $(DEPDIR)/stimfit-filedesc.Tpo $(DEPDIR)/stimfit-filedesc.Po
#	source='./src/core/filelib/axon/AxAbfFio32/filedesc.cpp' object='stimfit-filedesc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-filedesc.o `test -f './src/core/filelib/axon/AxAbfFio32/filedesc.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon/AxAbfFio32/filedesc.cpp

stimfit-filedesc.obj: ./src/core/filelib/axon/AxAbfFio32/filedesc.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-filedesc.obj -MD -MP -MF $(DEPDIR)/stimfit-filedesc.Tpo -c -o stimfit-filedesc.obj `if test -f './src/core/filelib/axon/AxAbfFio32/filedesc.cpp'; then $(CYGPATH_W) './src/core/filelib/axon/AxAbfFio32/filedesc.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/AxAbfFio32/filedesc.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-filedesc.Tpo $(DEPDIR)/stimfit-filedesc.Po
#	source='./src/core/filelib/axon/AxAbfFio32/filedesc.cpp' object='stimfit-filedesc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-filedesc.obj `if test -f './src/core/filelib/axon/AxAbfFio32/filedesc.cpp'; then $(CYGPATH_W) './src/core/filelib/axon/AxAbfFio32/filedesc.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/AxAbfFio32/filedesc.cpp'; fi`

stimfit-FileReadCache.o: ./src/core/filelib/axon/Common/FileReadCache.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-FileReadCache.o -MD -MP -MF $(DEPDIR)/stimfit-FileReadCache.Tpo -c -o stimfit-FileReadCache.o `test -f './src/core/filelib/axon/Common/FileReadCache.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon/Common/FileReadCache.cpp
	mv -f $(DEPDIR)/stimfit-FileReadCache.Tpo $(DEPDIR)/stimfit-FileReadCache.Po
#	source='./src/core/filelib/axon/Common/FileReadCache.cpp' object='stimfit-FileReadCache.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-FileReadCache.o `test -f './src/core/filelib/axon/Common/FileReadCache.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon/Common/FileReadCache.cpp

stimfit-FileReadCache.obj: ./src/core/filelib/axon/Common/FileReadCache.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-FileReadCache.obj -MD -MP -MF $(DEPDIR)/stimfit-FileReadCache.Tpo -c -o stimfit-FileReadCache.obj `if test -f './src/core/filelib/axon/Common/FileReadCache.cpp'; then $(CYGPATH_W) './src/core/filelib/axon/Common/FileReadCache.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/Common/FileReadCache.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-FileReadCache.Tpo $(DEPDIR)/stimfit-FileReadCache.Po
#	source='./src/core/filelib/axon/Common/FileReadCache.cpp' object='stimfit-FileReadCache.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-FileReadCache.obj `if test -f './src/core/filelib/axon/Common/FileReadCache.cpp'; then $(CYGPATH_W) './src/core/filelib/axon/Common/FileReadCache.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/Common/FileReadCache.cpp'; fi`

stimfit-FileIO.o: ./src/core/filelib/axon/Common/FileIO.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-FileIO.o -MD -MP -MF $(DEPDIR)/stimfit-FileIO.Tpo -c -o stimfit-FileIO.o `test -f './src/core/filelib/axon/Common/FileIO.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon/Common/FileIO.cpp
	mv -f $(DEPDIR)/stimfit-FileIO.Tpo $(DEPDIR)/stimfit-FileIO.Po
#	source='./src/core/filelib/axon/Common/FileIO.cpp' object='stimfit-FileIO.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-FileIO.o `test -f './src/core/filelib/axon/Common/FileIO.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon/Common/FileIO.cpp

stimfit-FileIO.obj: ./src/core/filelib/axon/Common/FileIO.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-FileIO.obj -MD -MP -MF $(DEPDIR)/stimfit-FileIO.Tpo -c -o stimfit-FileIO.obj `if test -f './src/core/filelib/axon/Common/FileIO.cpp'; then $(CYGPATH_W) './src/core/filelib/axon/Common/FileIO.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/Common/FileIO.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-FileIO.Tpo $(DEPDIR)/stimfit-FileIO.Po
#	source='./src/core/filelib/axon/Common/FileIO.cpp' object='stimfit-FileIO.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-FileIO.obj `if test -f './src/core/filelib/axon/Common/FileIO.cpp'; then $(CYGPATH_W) './src/core/filelib/axon/Common/FileIO.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/Common/FileIO.cpp'; fi`

stimfit-abfheadr.o: ./src/core/filelib/axon/AxAbfFio32/abfheadr.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-abfheadr.o -MD -MP -MF $(DEPDIR)/stimfit-abfheadr.Tpo -c -o stimfit-abfheadr.o `test -f './src/core/filelib/axon/AxAbfFio32/abfheadr.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon/AxAbfFio32/abfheadr.cpp
	mv -f $(DEPDIR)/stimfit-abfheadr.Tpo $(DEPDIR)/stimfit-abfheadr.Po
#	source='./src/core/filelib/axon/AxAbfFio32/abfheadr.cpp' object='stimfit-abfheadr.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-abfheadr.o `test -f './src/core/filelib/axon/AxAbfFio32/abfheadr.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon/AxAbfFio32/abfheadr.cpp

stimfit-abfheadr.obj: ./src/core/filelib/axon/AxAbfFio32/abfheadr.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-abfheadr.obj -MD -MP -MF $(DEPDIR)/stimfit-abfheadr.Tpo -c -o stimfit-abfheadr.obj `if test -f './src/core/filelib/axon/AxAbfFio32/abfheadr.cpp'; then $(CYGPATH_W) './src/core/filelib/axon/AxAbfFio32/abfheadr.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/AxAbfFio32/abfheadr.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-abfheadr.Tpo $(DEPDIR)/stimfit-abfheadr.Po
#	source='./src/core/filelib/axon/AxAbfFio32/abfheadr.cpp' object='stimfit-abfheadr.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-abfheadr.obj `if test -f './src/core/filelib/axon/AxAbfFio32/abfheadr.cpp'; then $(CYGPATH_W) './src/core/filelib/axon/AxAbfFio32/abfheadr.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/AxAbfFio32/abfheadr.cpp'; fi`

stimfit-abfhwave.o: ./src/core/filelib/axon/AxAbfFio32/abfhwave.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-abfhwave.o -MD -MP -MF $(DEPDIR)/stimfit-abfhwave.Tpo -c -o stimfit-abfhwave.o `test -f './src/core/filelib/axon/AxAbfFio32/abfhwave.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon/AxAbfFio32/abfhwave.cpp
	mv -f $(DEPDIR)/stimfit-abfhwave.Tpo $(DEPDIR)/stimfit-abfhwave.Po
#	source='./src/core/filelib/axon/AxAbfFio32/abfhwave.cpp' object='stimfit-abfhwave.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-abfhwave.o `test -f './src/core/filelib/axon/AxAbfFio32/abfhwave.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon/AxAbfFio32/abfhwave.cpp

stimfit-abfhwave.obj: ./src/core/filelib/axon/AxAbfFio32/abfhwave.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-abfhwave.obj -MD -MP -MF $(DEPDIR)/stimfit-abfhwave.Tpo -c -o stimfit-abfhwave.obj `if test -f './src/core/filelib/axon/AxAbfFio32/abfhwave.cpp'; then $(CYGPATH_W) './src/core/filelib/axon/AxAbfFio32/abfhwave.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/AxAbfFio32/abfhwave.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-abfhwave.Tpo $(DEPDIR)/stimfit-abfhwave.Po
#	source='./src/core/filelib/axon/AxAbfFio32/abfhwave.cpp' object='stimfit-abfhwave.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-abfhwave.obj `if test -f './src/core/filelib/axon/AxAbfFio32/abfhwave.cpp'; then $(CYGPATH_W) './src/core/filelib/axon/AxAbfFio32/abfhwave.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/AxAbfFio32/abfhwave.cpp'; fi`

stimfit-Oldheadr.o: ./src/core/filelib/axon/AxAbfFio32/Oldheadr.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-Oldheadr.o -MD -MP -MF $(DEPDIR)/stimfit-Oldheadr.Tpo -c -o stimfit-Oldheadr.o `test -f './src/core/filelib/axon/AxAbfFio32/Oldheadr.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon/AxAbfFio32/Oldheadr.cpp
	mv -f $(DEPDIR)/stimfit-Oldheadr.Tpo $(DEPDIR)/stimfit-Oldheadr.Po
#	source='./src/core/filelib/axon/AxAbfFio32/Oldheadr.cpp' object='stimfit-Oldheadr.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-Oldheadr.o `test -f './src/core/filelib/axon/AxAbfFio32/Oldheadr.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon/AxAbfFio32/Oldheadr.cpp

stimfit-Oldheadr.obj: ./src/core/filelib/axon/AxAbfFio32/Oldheadr.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-Oldheadr.obj -MD -MP -MF $(DEPDIR)/stimfit-Oldheadr.Tpo -c -o stimfit-Oldheadr.obj `if test -f './src/core/filelib/axon/AxAbfFio32/Oldheadr.cpp'; then $(CYGPATH_W) './src/core/filelib/axon/AxAbfFio32/Oldheadr.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/AxAbfFio32/Oldheadr.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-Oldheadr.Tpo $(DEPDIR)/stimfit-Oldheadr.Po
#	source='./src/core/filelib/axon/AxAbfFio32/Oldheadr.cpp' object='stimfit-Oldheadr.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-Oldheadr.obj `if test -f './src/core/filelib/axon/AxAbfFio32/Oldheadr.cpp'; then $(CYGPATH_W) './src/core/filelib/axon/AxAbfFio32/Oldheadr.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/AxAbfFio32/Oldheadr.cpp'; fi`

stimfit-abfutil.o: ./src/core/filelib/axon/AxAbfFio32/abfutil.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-abfutil.o -MD -MP -MF $(DEPDIR)/stimfit-abfutil.Tpo -c -o stimfit-abfutil.o `test -f './src/core/filelib/axon/AxAbfFio32/abfutil.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon/AxAbfFio32/abfutil.cpp
	mv -f $(DEPDIR)/stimfit-abfutil.Tpo $(DEPDIR)/stimfit-abfutil.Po
#	source='./src/core/filelib/axon/AxAbfFio32/abfutil.cpp' object='stimfit-abfutil.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-abfutil.o `test -f './src/core/filelib/axon/AxAbfFio32/abfutil.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon/AxAbfFio32/abfutil.cpp

stimfit-abfutil.obj: ./src/core/filelib/axon/AxAbfFio32/abfutil.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-abfutil.obj -MD -MP -MF $(DEPDIR)/stimfit-abfutil.Tpo -c -o stimfit-abfutil.obj `if test -f './src/core/filelib/axon/AxAbfFio32/abfutil.cpp'; then $(CYGPATH_W) './src/core/filelib/axon/AxAbfFio32/abfutil.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/AxAbfFio32/abfutil.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-abfutil.Tpo $(DEPDIR)/stimfit-abfutil.Po
#	source='./src/core/filelib/axon/AxAbfFio32/abfutil.cpp' object='stimfit-abfutil.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-abfutil.obj `if test -f './src/core/filelib/axon/AxAbfFio32/abfutil.cpp'; then $(CYGPATH_W) './src/core/filelib/axon/AxAbfFio32/abfutil.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/AxAbfFio32/abfutil.cpp'; fi`

stimfit-msbincvt.o: ./src/core/filelib/axon/AxAbfFio32/msbincvt.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-msbincvt.o -MD -MP -MF $(DEPDIR)/stimfit-msbincvt.Tpo -c -o stimfit-msbincvt.o `test -f './src/core/filelib/axon/AxAbfFio32/msbincvt.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon/AxAbfFio32/msbincvt.cpp
	mv -f $(DEPDIR)/stimfit-msbincvt.Tpo $(DEPDIR)/stimfit-msbincvt.Po
#	source='./src/core/filelib/axon/AxAbfFio32/msbincvt.cpp' object='stimfit-msbincvt.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-msbincvt.o `test -f './src/core/filelib/axon/AxAbfFio32/msbincvt.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon/AxAbfFio32/msbincvt.cpp

stimfit-msbincvt.obj: ./src/core/filelib/axon/AxAbfFio32/msbincvt.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-msbincvt.obj -MD -MP -MF $(DEPDIR)/stimfit-msbincvt.Tpo -c -o stimfit-msbincvt.obj `if test -f './src/core/filelib/axon/AxAbfFio32/msbincvt.cpp'; then $(CYGPATH_W) './src/core/filelib/axon/AxAbfFio32/msbincvt.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/AxAbfFio32/msbincvt.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-msbincvt.Tpo $(DEPDIR)/stimfit-msbincvt.Po
#	source='./src/core/filelib/axon/AxAbfFio32/msbincvt.cpp' object='stimfit-msbincvt.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-msbincvt.obj `if test -f './src/core/filelib/axon/AxAbfFio32/msbincvt.cpp'; then $(CYGPATH_W) './src/core/filelib/axon/AxAbfFio32/msbincvt.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/AxAbfFio32/msbincvt.cpp'; fi`

stimfit-abferror.o: ./src/core/filelib/axon/AxAbfFio32/abferror.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-abferror.o -MD -MP -MF $(DEPDIR)/stimfit-abferror.Tpo -c -o stimfit-abferror.o `test -f './src/core/filelib/axon/AxAbfFio32/abferror.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon/AxAbfFio32/abferror.cpp
	mv -f $(DEPDIR)/stimfit-abferror.Tpo $(DEPDIR)/stimfit-abferror.Po
#	source='./src/core/filelib/axon/AxAbfFio32/abferror.cpp' object='stimfit-abferror.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-abferror.o `test -f './src/core/filelib/axon/AxAbfFio32/abferror.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon/AxAbfFio32/abferror.cpp

stimfit-abferror.obj: ./src/core/filelib/axon/AxAbfFio32/abferror.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-abferror.obj -MD -MP -MF $(DEPDIR)/stimfit-abferror.Tpo -c -o stimfit-abferror.obj `if test -f './src/core/filelib/axon/AxAbfFio32/abferror.cpp'; then $(CYGPATH_W) './src/core/filelib/axon/AxAbfFio32/abferror.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/AxAbfFio32/abferror.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-abferror.Tpo $(DEPDIR)/stimfit-abferror.Po
#	source='./src/core/filelib/axon/AxAbfFio32/abferror.cpp' object='stimfit-abferror.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-abferror.obj `if test -f './src/core/filelib/axon/AxAbfFio32/abferror.cpp'; then $(CYGPATH_W) './src/core/filelib/axon/AxAbfFio32/abferror.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/AxAbfFio32/abferror.cpp'; fi`

stimfit-axatffio32.o: ./src/core/filelib/axon/AxAtfFio32/axatffio32.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-axatffio32.o -MD -MP -MF $(DEPDIR)/stimfit-axatffio32.Tpo -c -o stimfit-axatffio32.o `test -f './src/core/filelib/axon/AxAtfFio32/axatffio32.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon/AxAtfFio32/axatffio32.cpp
	mv -f $(DEPDIR)/stimfit-axatffio32.Tpo $(DEPDIR)/stimfit-axatffio32.Po
#	source='./src/core/filelib/axon/AxAtfFio32/axatffio32.cpp' object='stimfit-axatffio32.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-axatffio32.o `test -f './src/core/filelib/axon/AxAtfFio32/axatffio32.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon/AxAtfFio32/axatffio32.cpp

stimfit-axatffio32.obj: ./src/core/filelib/axon/AxAtfFio32/axatffio32.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-axatffio32.obj -MD -MP -MF $(DEPDIR)/stimfit-axatffio32.Tpo -c -o stimfit-axatffio32.obj `if test -f './src/core/filelib/axon/AxAtfFio32/axatffio32.cpp'; then $(CYGPATH_W) './src/core/filelib/axon/AxAtfFio32/axatffio32.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/AxAtfFio32/axatffio32.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-axatffio32.Tpo $(DEPDIR)/stimfit-axatffio32.Po
#	source='./src/core/filelib/axon/AxAtfFio32/axatffio32.cpp' object='stimfit-axatffio32.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-axatffio32.obj `if test -f './src/core/filelib/axon/AxAtfFio32/axatffio32.cpp'; then $(CYGPATH_W) './src/core/filelib/axon/AxAtfFio32/axatffio32.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/AxAtfFio32/axatffio32.cpp'; fi`

stimfit-fileio2.o: ./src/core/filelib/axon/AxAtfFio32/fileio2.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-fileio2.o -MD -MP -MF $(DEPDIR)/stimfit-fileio2.Tpo -c -o stimfit-fileio2.o `test -f './src/core/filelib/axon/AxAtfFio32/fileio2.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon/AxAtfFio32/fileio2.cpp
	mv -f $(DEPDIR)/stimfit-fileio2.Tpo $(DEPDIR)/stimfit-fileio2.Po
#	source='./src/core/filelib/axon/AxAtfFio32/fileio2.cpp' object='stimfit-fileio2.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-fileio2.o `test -f './src/core/filelib/axon/AxAtfFio32/fileio2.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon/AxAtfFio32/fileio2.cpp

stimfit-fileio2.obj: ./src/core/filelib/axon/AxAtfFio32/fileio2.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-fileio2.obj -MD -MP -MF $(DEPDIR)/stimfit-fileio2.Tpo -c -o stimfit-fileio2.obj `if test -f './src/core/filelib/axon/AxAtfFio32/fileio2.cpp'; then $(CYGPATH_W) './src/core/filelib/axon/AxAtfFio32/fileio2.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/AxAtfFio32/fileio2.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-fileio2.Tpo $(DEPDIR)/stimfit-fileio2.Po
#	source='./src/core/filelib/axon/AxAtfFio32/fileio2.cpp' object='stimfit-fileio2.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-fileio2.obj `if test -f './src/core/filelib/axon/AxAtfFio32/fileio2.cpp'; then $(CYGPATH_W) './src/core/filelib/axon/AxAtfFio32/fileio2.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon/AxAtfFio32/fileio2.cpp'; fi`

stimfit-ProtocolReaderABF2.o: ./src/core/filelib/axon2/ProtocolReaderABF2.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-ProtocolReaderABF2.o -MD -MP -MF $(DEPDIR)/stimfit-ProtocolReaderABF2.Tpo -c -o stimfit-ProtocolReaderABF2.o `test -f './src/core/filelib/axon2/ProtocolReaderABF2.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon2/ProtocolReaderABF2.cpp
	mv -f $(DEPDIR)/stimfit-ProtocolReaderABF2.Tpo $(DEPDIR)/stimfit-ProtocolReaderABF2.Po
#	source='./src/core/filelib/axon2/ProtocolReaderABF2.cpp' object='stimfit-ProtocolReaderABF2.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-ProtocolReaderABF2.o `test -f './src/core/filelib/axon2/ProtocolReaderABF2.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon2/ProtocolReaderABF2.cpp

stimfit-ProtocolReaderABF2.obj: ./src/core/filelib/axon2/ProtocolReaderABF2.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-ProtocolReaderABF2.obj -MD -MP -MF $(DEPDIR)/stimfit-ProtocolReaderABF2.Tpo -c -o stimfit-ProtocolReaderABF2.obj `if test -f './src/core/filelib/axon2/ProtocolReaderABF2.cpp'; then $(CYGPATH_W) './src/core/filelib/axon2/ProtocolReaderABF2.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon2/ProtocolReaderABF2.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-ProtocolReaderABF2.Tpo $(DEPDIR)/stimfit-ProtocolReaderABF2.Po
#	source='./src/core/filelib/axon2/ProtocolReaderABF2.cpp' object='stimfit-ProtocolReaderABF2.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-ProtocolReaderABF2.obj `if test -f './src/core/filelib/axon2/ProtocolReaderABF2.cpp'; then $(CYGPATH_W) './src/core/filelib/axon2/ProtocolReaderABF2.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon2/ProtocolReaderABF2.cpp'; fi`

stimfit-SimpleStringCache.o: ./src/core/filelib/axon2/SimpleStringCache.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-SimpleStringCache.o -MD -MP -MF $(DEPDIR)/stimfit-SimpleStringCache.Tpo -c -o stimfit-SimpleStringCache.o `test -f './src/core/filelib/axon2/SimpleStringCache.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon2/SimpleStringCache.cpp
	mv -f $(DEPDIR)/stimfit-SimpleStringCache.Tpo $(DEPDIR)/stimfit-SimpleStringCache.Po
#	source='./src/core/filelib/axon2/SimpleStringCache.cpp' object='stimfit-SimpleStringCache.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-SimpleStringCache.o `test -f './src/core/filelib/axon2/SimpleStringCache.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon2/SimpleStringCache.cpp

stimfit-SimpleStringCache.obj: ./src/core/filelib/axon2/SimpleStringCache.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-SimpleStringCache.obj -MD -MP -MF $(DEPDIR)/stimfit-SimpleStringCache.Tpo -c -o stimfit-SimpleStringCache.obj `if test -f './src/core/filelib/axon2/SimpleStringCache.cpp'; then $(CYGPATH_W) './src/core/filelib/axon2/SimpleStringCache.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon2/SimpleStringCache.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-SimpleStringCache.Tpo $(DEPDIR)/stimfit-SimpleStringCache.Po
#	source='./src/core/filelib/axon2/SimpleStringCache.cpp' object='stimfit-SimpleStringCache.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-SimpleStringCache.obj `if test -f './src/core/filelib/axon2/SimpleStringCache.cpp'; then $(CYGPATH_W) './src/core/filelib/axon2/SimpleStringCache.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon2/SimpleStringCache.cpp'; fi`

stimfit-abf2headr.o: ./src/core/filelib/axon2/abf2headr.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-abf2headr.o -MD -MP -MF $(DEPDIR)/stimfit-abf2headr.Tpo -c -o stimfit-abf2headr.o `test -f './src/core/filelib/axon2/abf2headr.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon2/abf2headr.cpp
	mv -f $(DEPDIR)/stimfit-abf2headr.Tpo $(DEPDIR)/stimfit-abf2headr.Po
#	source='./src/core/filelib/axon2/abf2headr.cpp' object='stimfit-abf2headr.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-abf2headr.o `test -f './src/core/filelib/axon2/abf2headr.cpp' || echo '$(srcdir)/'`./src/core/filelib/axon2/abf2headr.cpp

stimfit-abf2headr.obj: ./src/core/filelib/axon2/abf2headr.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-abf2headr.obj -MD -MP -MF $(DEPDIR)/stimfit-abf2headr.Tpo -c -o stimfit-abf2headr.obj `if test -f './src/core/filelib/axon2/abf2headr.cpp'; then $(CYGPATH_W) './src/core/filelib/axon2/abf2headr.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon2/abf2headr.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-abf2headr.Tpo $(DEPDIR)/stimfit-abf2headr.Po
#	source='./src/core/filelib/axon2/abf2headr.cpp' object='stimfit-abf2headr.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-abf2headr.obj `if test -f './src/core/filelib/axon2/abf2headr.cpp'; then $(CYGPATH_W) './src/core/filelib/axon2/abf2headr.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axon2/abf2headr.cpp'; fi`

stimfit-AxoGraph_ReadWrite.o: ./src/core/filelib/axg/AxoGraph_ReadWrite.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-AxoGraph_ReadWrite.o -MD -MP -MF $(DEPDIR)/stimfit-AxoGraph_ReadWrite.Tpo -c -o stimfit-AxoGraph_ReadWrite.o `test -f './src/core/filelib/axg/AxoGraph_ReadWrite.cpp' || echo '$(srcdir)/'`./src/core/filelib/axg/AxoGraph_ReadWrite.cpp
	mv -f $(DEPDIR)/stimfit-AxoGraph_ReadWrite.Tpo $(DEPDIR)/stimfit-AxoGraph_ReadWrite.Po
#	source='./src/core/filelib/axg/AxoGraph_ReadWrite.cpp' object='stimfit-AxoGraph_ReadWrite.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-AxoGraph_ReadWrite.o `test -f './src/core/filelib/axg/AxoGraph_ReadWrite.cpp' || echo '$(srcdir)/'`./src/core/filelib/axg/AxoGraph_ReadWrite.cpp

stimfit-AxoGraph_ReadWrite.obj: ./src/core/filelib/axg/AxoGraph_ReadWrite.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-AxoGraph_ReadWrite.obj -MD -MP -MF $(DEPDIR)/stimfit-AxoGraph_ReadWrite.Tpo -c -o stimfit-AxoGraph_ReadWrite.obj `if test -f './src/core/filelib/axg/AxoGraph_ReadWrite.cpp'; then $(CYGPATH_W) './src/core/filelib/axg/AxoGraph_ReadWrite.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axg/AxoGraph_ReadWrite.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-AxoGraph_ReadWrite.Tpo $(DEPDIR)/stimfit-AxoGraph_ReadWrite.Po
#	source='./src/core/filelib/axg/AxoGraph_ReadWrite.cpp' object='stimfit-AxoGraph_ReadWrite.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-AxoGraph_ReadWrite.obj `if test -f './src/core/filelib/axg/AxoGraph_ReadWrite.cpp'; then $(CYGPATH_W) './src/core/filelib/axg/AxoGraph_ReadWrite.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axg/AxoGraph_ReadWrite.cpp'; fi`

stimfit-fileUtils.o: ./src/core/filelib/axg/fileUtils.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-fileUtils.o -MD -MP -MF $(DEPDIR)/stimfit-fileUtils.Tpo -c -o stimfit-fileUtils.o `test -f './src/core/filelib/axg/fileUtils.cpp' || echo '$(srcdir)/'`./src/core/filelib/axg/fileUtils.cpp
	mv -f $(DEPDIR)/stimfit-fileUtils.Tpo $(DEPDIR)/stimfit-fileUtils.Po
#	source='./src/core/filelib/axg/fileUtils.cpp' object='stimfit-fileUtils.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-fileUtils.o `test -f './src/core/filelib/axg/fileUtils.cpp' || echo '$(srcdir)/'`./src/core/filelib/axg/fileUtils.cpp

stimfit-fileUtils.obj: ./src/core/filelib/axg/fileUtils.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-fileUtils.obj -MD -MP -MF $(DEPDIR)/stimfit-fileUtils.Tpo -c -o stimfit-fileUtils.obj `if test -f './src/core/filelib/axg/fileUtils.cpp'; then $(CYGPATH_W) './src/core/filelib/axg/fileUtils.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axg/fileUtils.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-fileUtils.Tpo $(DEPDIR)/stimfit-fileUtils.Po
#	source='./src/core/filelib/axg/fileUtils.cpp' object='stimfit-fileUtils.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-fileUtils.obj `if test -f './src/core/filelib/axg/fileUtils.cpp'; then $(CYGPATH_W) './src/core/filelib/axg/fileUtils.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axg/fileUtils.cpp'; fi`

stimfit-stringUtils.o: ./src/core/filelib/axg/stringUtils.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-stringUtils.o -MD -MP -MF $(DEPDIR)/stimfit-stringUtils.Tpo -c -o stimfit-stringUtils.o `test -f './src/core/filelib/axg/stringUtils.cpp' || echo '$(srcdir)/'`./src/core/filelib/axg/stringUtils.cpp
	mv -f $(DEPDIR)/stimfit-stringUtils.Tpo $(DEPDIR)/stimfit-stringUtils.Po
#	source='./src/core/filelib/axg/stringUtils.cpp' object='stimfit-stringUtils.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-stringUtils.o `test -f './src/core/filelib/axg/stringUtils.cpp' || echo '$(srcdir)/'`./src/core/filelib/axg/stringUtils.cpp

stimfit-stringUtils.obj: ./src/core/filelib/axg/stringUtils.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-stringUtils.obj -MD -MP -MF $(DEPDIR)/stimfit-stringUtils.Tpo -c -o stimfit-stringUtils.obj `if test -f './src/core/filelib/axg/stringUtils.cpp'; then $(CYGPATH_W) './src/core/filelib/axg/stringUtils.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axg/stringUtils.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-stringUtils.Tpo $(DEPDIR)/stimfit-stringUtils.Po
#	source='./src/core/filelib/axg/stringUtils.cpp' object='stimfit-stringUtils.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-stringUtils.obj `if test -f './src/core/filelib/axg/stringUtils.cpp'; then $(CYGPATH_W) './src/core/filelib/axg/stringUtils.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axg/stringUtils.cpp'; fi`

stimfit-byteswap.o: ./src/core/filelib/axg/byteswap.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-byteswap.o -MD -MP -MF $(DEPDIR)/stimfit-byteswap.Tpo -c -o stimfit-byteswap.o `test -f './src/core/filelib/axg/byteswap.cpp' || echo '$(srcdir)/'`./src/core/filelib/axg/byteswap.cpp
	mv -f $(DEPDIR)/stimfit-byteswap.Tpo $(DEPDIR)/stimfit-byteswap.Po
#	source='./src/core/filelib/axg/byteswap.cpp' object='stimfit-byteswap.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-byteswap.o `test -f './src/core/filelib/axg/byteswap.cpp' || echo '$(srcdir)/'`./src/core/filelib/axg/byteswap.cpp

stimfit-byteswap.obj: ./src/core/filelib/axg/byteswap.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-byteswap.obj -MD -MP -MF $(DEPDIR)/stimfit-byteswap.Tpo -c -o stimfit-byteswap.obj `if test -f './src/core/filelib/axg/byteswap.cpp'; then $(CYGPATH_W) './src/core/filelib/axg/byteswap.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axg/byteswap.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-byteswap.Tpo $(DEPDIR)/stimfit-byteswap.Po
#	source='./src/core/filelib/axg/byteswap.cpp' object='stimfit-byteswap.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-byteswap.obj `if test -f './src/core/filelib/axg/byteswap.cpp'; then $(CYGPATH_W) './src/core/filelib/axg/byteswap.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/core/filelib/axg/byteswap.cpp'; fi`

stimfit-app.o: ./src/app/app.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-app.o -MD -MP -MF $(DEPDIR)/stimfit-app.Tpo -c -o stimfit-app.o `test -f './src/app/app.cpp' || echo '$(srcdir)/'`./src/app/app.cpp
	mv -f $(DEPDIR)/stimfit-app.Tpo $(DEPDIR)/stimfit-app.Po
#	source='./src/app/app.cpp' object='stimfit-app.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-app.o `test -f './src/app/app.cpp' || echo '$(srcdir)/'`./src/app/app.cpp

stimfit-app.obj: ./src/app/app.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-app.obj -MD -MP -MF $(DEPDIR)/stimfit-app.Tpo -c -o stimfit-app.obj `if test -f './src/app/app.cpp'; then $(CYGPATH_W) './src/app/app.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/app.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-app.Tpo $(DEPDIR)/stimfit-app.Po
#	source='./src/app/app.cpp' object='stimfit-app.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-app.obj `if test -f './src/app/app.cpp'; then $(CYGPATH_W) './src/app/app.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/app.cpp'; fi`

stimfit-doc.o: ./src/app/doc.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-doc.o -MD -MP -MF $(DEPDIR)/stimfit-doc.Tpo -c -o stimfit-doc.o `test -f './src/app/doc.cpp' || echo '$(srcdir)/'`./src/app/doc.cpp
	mv -f $(DEPDIR)/stimfit-doc.Tpo $(DEPDIR)/stimfit-doc.Po
#	source='./src/app/doc.cpp' object='stimfit-doc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-doc.o `test -f './src/app/doc.cpp' || echo '$(srcdir)/'`./src/app/doc.cpp

stimfit-doc.obj: ./src/app/doc.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-doc.obj -MD -MP -MF $(DEPDIR)/stimfit-doc.Tpo -c -o stimfit-doc.obj `if test -f './src/app/doc.cpp'; then $(CYGPATH_W) './src/app/doc.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/doc.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-doc.Tpo $(DEPDIR)/stimfit-doc.Po
#	source='./src/app/doc.cpp' object='stimfit-doc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-doc.obj `if test -f './src/app/doc.cpp'; then $(CYGPATH_W) './src/app/doc.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/doc.cpp'; fi`

stimfit-stfcheckbox.o: ./src/app/stfcheckbox.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-stfcheckbox.o -MD -MP -MF $(DEPDIR)/stimfit-stfcheckbox.Tpo -c -o stimfit-stfcheckbox.o `test -f './src/app/stfcheckbox.cpp' || echo '$(srcdir)/'`./src/app/stfcheckbox.cpp
	mv -f $(DEPDIR)/stimfit-stfcheckbox.Tpo $(DEPDIR)/stimfit-stfcheckbox.Po
#	source='./src/app/stfcheckbox.cpp' object='stimfit-stfcheckbox.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-stfcheckbox.o `test -f './src/app/stfcheckbox.cpp' || echo '$(srcdir)/'`./src/app/stfcheckbox.cpp

stimfit-stfcheckbox.obj: ./src/app/stfcheckbox.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-stfcheckbox.obj -MD -MP -MF $(DEPDIR)/stimfit-stfcheckbox.Tpo -c -o stimfit-stfcheckbox.obj `if test -f './src/app/stfcheckbox.cpp'; then $(CYGPATH_W) './src/app/stfcheckbox.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/stfcheckbox.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-stfcheckbox.Tpo $(DEPDIR)/stimfit-stfcheckbox.Po
#	source='./src/app/stfcheckbox.cpp' object='stimfit-stfcheckbox.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-stfcheckbox.obj `if test -f './src/app/stfcheckbox.cpp'; then $(CYGPATH_W) './src/app/stfcheckbox.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/stfcheckbox.cpp'; fi`

stimfit-copygrid.o: ./src/app/copygrid.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-copygrid.o -MD -MP -MF $(DEPDIR)/stimfit-copygrid.Tpo -c -o stimfit-copygrid.o `test -f './src/app/copygrid.cpp' || echo '$(srcdir)/'`./src/app/copygrid.cpp
	mv -f $(DEPDIR)/stimfit-copygrid.Tpo $(DEPDIR)/stimfit-copygrid.Po
#	source='./src/app/copygrid.cpp' object='stimfit-copygrid.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-copygrid.o `test -f './src/app/copygrid.cpp' || echo '$(srcdir)/'`./src/app/copygrid.cpp

stimfit-copygrid.obj: ./src/app/copygrid.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-copygrid.obj -MD -MP -MF $(DEPDIR)/stimfit-copygrid.Tpo -c -o stimfit-copygrid.obj `if test -f './src/app/copygrid.cpp'; then $(CYGPATH_W) './src/app/copygrid.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/copygrid.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-copygrid.Tpo $(DEPDIR)/stimfit-copygrid.Po
#	source='./src/app/copygrid.cpp' object='stimfit-copygrid.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-copygrid.obj `if test -f './src/app/copygrid.cpp'; then $(CYGPATH_W) './src/app/copygrid.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/copygrid.cpp'; fi`

stimfit-graph.o: ./src/app/graph.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-graph.o -MD -MP -MF $(DEPDIR)/stimfit-graph.Tpo -c -o stimfit-graph.o `test -f './src/app/graph.cpp' || echo '$(srcdir)/'`./src/app/graph.cpp
	mv -f $(DEPDIR)/stimfit-graph.Tpo $(DEPDIR)/stimfit-graph.Po
#	source='./src/app/graph.cpp' object='stimfit-graph.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-graph.o `test -f './src/app/graph.cpp' || echo '$(srcdir)/'`./src/app/graph.cpp

stimfit-graph.obj: ./src/app/graph.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-graph.obj -MD -MP -MF $(DEPDIR)/stimfit-graph.Tpo -c -o stimfit-graph.obj `if test -f './src/app/graph.cpp'; then $(CYGPATH_W) './src/app/graph.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/graph.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-graph.Tpo $(DEPDIR)/stimfit-graph.Po
#	source='./src/app/graph.cpp' object='stimfit-graph.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-graph.obj `if test -f './src/app/graph.cpp'; then $(CYGPATH_W) './src/app/graph.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/graph.cpp'; fi`

stimfit-printout.o: ./src/app/printout.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-printout.o -MD -MP -MF $(DEPDIR)/stimfit-printout.Tpo -c -o stimfit-printout.o `test -f './src/app/printout.cpp' || echo '$(srcdir)/'`./src/app/printout.cpp
	mv -f $(DEPDIR)/stimfit-printout.Tpo $(DEPDIR)/stimfit-printout.Po
#	source='./src/app/printout.cpp' object='stimfit-printout.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-printout.o `test -f './src/app/printout.cpp' || echo '$(srcdir)/'`./src/app/printout.cpp

stimfit-printout.obj: ./src/app/printout.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-printout.obj -MD -MP -MF $(DEPDIR)/stimfit-printout.Tpo -c -o stimfit-printout.obj `if test -f './src/app/printout.cpp'; then $(CYGPATH_W) './src/app/printout.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/printout.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-printout.Tpo $(DEPDIR)/stimfit-printout.Po
#	source='./src/app/printout.cpp' object='stimfit-printout.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-printout.obj `if test -f './src/app/printout.cpp'; then $(CYGPATH_W) './src/app/printout.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/printout.cpp'; fi`

stimfit-parentframe.o: ./src/app/parentframe.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-parentframe.o -MD -MP -MF $(DEPDIR)/stimfit-parentframe.Tpo -c -o stimfit-parentframe.o `test -f './src/app/parentframe.cpp' || echo '$(srcdir)/'`./src/app/parentframe.cpp
	mv -f $(DEPDIR)/stimfit-parentframe.Tpo $(DEPDIR)/stimfit-parentframe.Po
#	source='./src/app/parentframe.cpp' object='stimfit-parentframe.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-parentframe.o `test -f './src/app/parentframe.cpp' || echo '$(srcdir)/'`./src/app/parentframe.cpp

stimfit-parentframe.obj: ./src/app/parentframe.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-parentframe.obj -MD -MP -MF $(DEPDIR)/stimfit-parentframe.Tpo -c -o stimfit-parentframe.obj `if test -f './src/app/parentframe.cpp'; then $(CYGPATH_W) './src/app/parentframe.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/parentframe.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-parentframe.Tpo $(DEPDIR)/stimfit-parentframe.Po
#	source='./src/app/parentframe.cpp' object='stimfit-parentframe.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-parentframe.obj `if test -f './src/app/parentframe.cpp'; then $(CYGPATH_W) './src/app/parentframe.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/parentframe.cpp'; fi`

stimfit-childframe.o: ./src/app/childframe.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-childframe.o -MD -MP -MF $(DEPDIR)/stimfit-childframe.Tpo -c -o stimfit-childframe.o `test -f './src/app/childframe.cpp' || echo '$(srcdir)/'`./src/app/childframe.cpp
	mv -f $(DEPDIR)/stimfit-childframe.Tpo $(DEPDIR)/stimfit-childframe.Po
#	source='./src/app/childframe.cpp' object='stimfit-childframe.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-childframe.o `test -f './src/app/childframe.cpp' || echo '$(srcdir)/'`./src/app/childframe.cpp

stimfit-childframe.obj: ./src/app/childframe.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-childframe.obj -MD -MP -MF $(DEPDIR)/stimfit-childframe.Tpo -c -o stimfit-childframe.obj `if test -f './src/app/childframe.cpp'; then $(CYGPATH_W) './src/app/childframe.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/childframe.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-childframe.Tpo $(DEPDIR)/stimfit-childframe.Po
#	source='./src/app/childframe.cpp' object='stimfit-childframe.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-childframe.obj `if test -f './src/app/childframe.cpp'; then $(CYGPATH_W) './src/app/childframe.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/childframe.cpp'; fi`

stimfit-view.o: ./src/app/view.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-view.o -MD -MP -MF $(DEPDIR)/stimfit-view.Tpo -c -o stimfit-view.o `test -f './src/app/view.cpp' || echo '$(srcdir)/'`./src/app/view.cpp
	mv -f $(DEPDIR)/stimfit-view.Tpo $(DEPDIR)/stimfit-view.Po
#	source='./src/app/view.cpp' object='stimfit-view.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-view.o `test -f './src/app/view.cpp' || echo '$(srcdir)/'`./src/app/view.cpp

stimfit-view.obj: ./src/app/view.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-view.obj -MD -MP -MF $(DEPDIR)/stimfit-view.Tpo -c -o stimfit-view.obj `if test -f './src/app/view.cpp'; then $(CYGPATH_W) './src/app/view.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/view.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-view.Tpo $(DEPDIR)/stimfit-view.Po
#	source='./src/app/view.cpp' object='stimfit-view.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-view.obj `if test -f './src/app/view.cpp'; then $(CYGPATH_W) './src/app/view.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/view.cpp'; fi`

stimfit-table.o: ./src/app/table.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-table.o -MD -MP -MF $(DEPDIR)/stimfit-table.Tpo -c -o stimfit-table.o `test -f './src/app/table.cpp' || echo '$(srcdir)/'`./src/app/table.cpp
	mv -f $(DEPDIR)/stimfit-table.Tpo $(DEPDIR)/stimfit-table.Po
#	source='./src/app/table.cpp' object='stimfit-table.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-table.o `test -f './src/app/table.cpp' || echo '$(srcdir)/'`./src/app/table.cpp

stimfit-table.obj: ./src/app/table.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-table.obj -MD -MP -MF $(DEPDIR)/stimfit-table.Tpo -c -o stimfit-table.obj `if test -f './src/app/table.cpp'; then $(CYGPATH_W) './src/app/table.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/table.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-table.Tpo $(DEPDIR)/stimfit-table.Po
#	source='./src/app/table.cpp' object='stimfit-table.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-table.obj `if test -f './src/app/table.cpp'; then $(CYGPATH_W) './src/app/table.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/table.cpp'; fi`

stimfit-zoom.o: ./src/app/zoom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-zoom.o -MD -MP -MF $(DEPDIR)/stimfit-zoom.Tpo -c -o stimfit-zoom.o `test -f './src/app/zoom.cpp' || echo '$(srcdir)/'`./src/app/zoom.cpp
	mv -f $(DEPDIR)/stimfit-zoom.Tpo $(DEPDIR)/stimfit-zoom.Po
#	source='./src/app/zoom.cpp' object='stimfit-zoom.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-zoom.o `test -f './src/app/zoom.cpp' || echo '$(srcdir)/'`./src/app/zoom.cpp

stimfit-zoom.obj: ./src/app/zoom.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-zoom.obj -MD -MP -MF $(DEPDIR)/stimfit-zoom.Tpo -c -o stimfit-zoom.obj `if test -f './src/app/zoom.cpp'; then $(CYGPATH_W) './src/app/zoom.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/zoom.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-zoom.Tpo $(DEPDIR)/stimfit-zoom.Po
#	source='./src/app/zoom.cpp' object='stimfit-zoom.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-zoom.obj `if test -f './src/app/zoom.cpp'; then $(CYGPATH_W) './src/app/zoom.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/zoom.cpp'; fi`

stimfit-cursorsdlg.o: ./src/app/dlgs/cursorsdlg.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-cursorsdlg.o -MD -MP -MF $(DEPDIR)/stimfit-cursorsdlg.Tpo -c -o stimfit-cursorsdlg.o `test -f './src/app/dlgs/cursorsdlg.cpp' || echo '$(srcdir)/'`./src/app/dlgs/cursorsdlg.cpp
	mv -f $(DEPDIR)/stimfit-cursorsdlg.Tpo $(DEPDIR)/stimfit-cursorsdlg.Po
#	source='./src/app/dlgs/cursorsdlg.cpp' object='stimfit-cursorsdlg.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-cursorsdlg.o `test -f './src/app/dlgs/cursorsdlg.cpp' || echo '$(srcdir)/'`./src/app/dlgs/cursorsdlg.cpp

stimfit-cursorsdlg.obj: ./src/app/dlgs/cursorsdlg.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-cursorsdlg.obj -MD -MP -MF $(DEPDIR)/stimfit-cursorsdlg.Tpo -c -o stimfit-cursorsdlg.obj `if test -f './src/app/dlgs/cursorsdlg.cpp'; then $(CYGPATH_W) './src/app/dlgs/cursorsdlg.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/dlgs/cursorsdlg.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-cursorsdlg.Tpo $(DEPDIR)/stimfit-cursorsdlg.Po
#	source='./src/app/dlgs/cursorsdlg.cpp' object='stimfit-cursorsdlg.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-cursorsdlg.obj `if test -f './src/app/dlgs/cursorsdlg.cpp'; then $(CYGPATH_W) './src/app/dlgs/cursorsdlg.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/dlgs/cursorsdlg.cpp'; fi`

stimfit-eventdlg.o: ./src/app/dlgs/eventdlg.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-eventdlg.o -MD -MP -MF $(DEPDIR)/stimfit-eventdlg.Tpo -c -o stimfit-eventdlg.o `test -f './src/app/dlgs/eventdlg.cpp' || echo '$(srcdir)/'`./src/app/dlgs/eventdlg.cpp
	mv -f $(DEPDIR)/stimfit-eventdlg.Tpo $(DEPDIR)/stimfit-eventdlg.Po
#	source='./src/app/dlgs/eventdlg.cpp' object='stimfit-eventdlg.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-eventdlg.o `test -f './src/app/dlgs/eventdlg.cpp' || echo '$(srcdir)/'`./src/app/dlgs/eventdlg.cpp

stimfit-eventdlg.obj: ./src/app/dlgs/eventdlg.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-eventdlg.obj -MD -MP -MF $(DEPDIR)/stimfit-eventdlg.Tpo -c -o stimfit-eventdlg.obj `if test -f './src/app/dlgs/eventdlg.cpp'; then $(CYGPATH_W) './src/app/dlgs/eventdlg.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/dlgs/eventdlg.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-eventdlg.Tpo $(DEPDIR)/stimfit-eventdlg.Po
#	source='./src/app/dlgs/eventdlg.cpp' object='stimfit-eventdlg.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-eventdlg.obj `if test -f './src/app/dlgs/eventdlg.cpp'; then $(CYGPATH_W) './src/app/dlgs/eventdlg.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/dlgs/eventdlg.cpp'; fi`

stimfit-fitseldlg.o: ./src/app/dlgs/fitseldlg.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-fitseldlg.o -MD -MP -MF $(DEPDIR)/stimfit-fitseldlg.Tpo -c -o stimfit-fitseldlg.o `test -f './src/app/dlgs/fitseldlg.cpp' || echo '$(srcdir)/'`./src/app/dlgs/fitseldlg.cpp
	mv -f $(DEPDIR)/stimfit-fitseldlg.Tpo $(DEPDIR)/stimfit-fitseldlg.Po
#	source='./src/app/dlgs/fitseldlg.cpp' object='stimfit-fitseldlg.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-fitseldlg.o `test -f './src/app/dlgs/fitseldlg.cpp' || echo '$(srcdir)/'`./src/app/dlgs/fitseldlg.cpp

stimfit-fitseldlg.obj: ./src/app/dlgs/fitseldlg.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-fitseldlg.obj -MD -MP -MF $(DEPDIR)/stimfit-fitseldlg.Tpo -c -o stimfit-fitseldlg.obj `if test -f './src/app/dlgs/fitseldlg.cpp'; then $(CYGPATH_W) './src/app/dlgs/fitseldlg.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/dlgs/fitseldlg.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-fitseldlg.Tpo $(DEPDIR)/stimfit-fitseldlg.Po
#	source='./src/app/dlgs/fitseldlg.cpp' object='stimfit-fitseldlg.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-fitseldlg.obj `if test -f './src/app/dlgs/fitseldlg.cpp'; then $(CYGPATH_W) './src/app/dlgs/fitseldlg.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/dlgs/fitseldlg.cpp'; fi`

stimfit-smalldlgs.o: ./src/app/dlgs/smalldlgs.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-smalldlgs.o -MD -MP -MF $(DEPDIR)/stimfit-smalldlgs.Tpo -c -o stimfit-smalldlgs.o `test -f './src/app/dlgs/smalldlgs.cpp' || echo '$(srcdir)/'`./src/app/dlgs/smalldlgs.cpp
	mv -f $(DEPDIR)/stimfit-smalldlgs.Tpo $(DEPDIR)/stimfit-smalldlgs.Po
#	source='./src/app/dlgs/smalldlgs.cpp' object='stimfit-smalldlgs.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-smalldlgs.o `test -f './src/app/dlgs/smalldlgs.cpp' || echo '$(srcdir)/'`./src/app/dlgs/smalldlgs.cpp

stimfit-smalldlgs.obj: ./src/app/dlgs/smalldlgs.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-smalldlgs.obj -MD -MP -MF $(DEPDIR)/stimfit-smalldlgs.Tpo -c -o stimfit-smalldlgs.obj `if test -f './src/app/dlgs/smalldlgs.cpp'; then $(CYGPATH_W) './src/app/dlgs/smalldlgs.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/dlgs/smalldlgs.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-smalldlgs.Tpo $(DEPDIR)/stimfit-smalldlgs.Po
#	source='./src/app/dlgs/smalldlgs.cpp' object='stimfit-smalldlgs.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-smalldlgs.obj `if test -f './src/app/dlgs/smalldlgs.cpp'; then $(CYGPATH_W) './src/app/dlgs/smalldlgs.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/dlgs/smalldlgs.cpp'; fi`

stimfit-plugins.o: ./src/app/plugins/plugins.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-plugins.o -MD -MP -MF $(DEPDIR)/stimfit-plugins.Tpo -c -o stimfit-plugins.o `test -f './src/app/plugins/plugins.cpp' || echo '$(srcdir)/'`./src/app/plugins/plugins.cpp
	mv -f $(DEPDIR)/stimfit-plugins.Tpo $(DEPDIR)/stimfit-plugins.Po
#	source='./src/app/plugins/plugins.cpp' object='stimfit-plugins.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-plugins.o `test -f './src/app/plugins/plugins.cpp' || echo '$(srcdir)/'`./src/app/plugins/plugins.cpp

stimfit-plugins.obj: ./src/app/plugins/plugins.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-plugins.obj -MD -MP -MF $(DEPDIR)/stimfit-plugins.Tpo -c -o stimfit-plugins.obj `if test -f './src/app/plugins/plugins.cpp'; then $(CYGPATH_W) './src/app/plugins/plugins.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/plugins/plugins.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-plugins.Tpo $(DEPDIR)/stimfit-plugins.Po
#	source='./src/app/plugins/plugins.cpp' object='stimfit-plugins.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-plugins.obj `if test -f './src/app/plugins/plugins.cpp'; then $(CYGPATH_W) './src/app/plugins/plugins.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/plugins/plugins.cpp'; fi`

stimfit-funclib.o: ./src/app/funclib/funclib.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-funclib.o -MD -MP -MF $(DEPDIR)/stimfit-funclib.Tpo -c -o stimfit-funclib.o `test -f './src/app/funclib/funclib.cpp' || echo '$(srcdir)/'`./src/app/funclib/funclib.cpp
	mv -f $(DEPDIR)/stimfit-funclib.Tpo $(DEPDIR)/stimfit-funclib.Po
#	source='./src/app/funclib/funclib.cpp' object='stimfit-funclib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-funclib.o `test -f './src/app/funclib/funclib.cpp' || echo '$(srcdir)/'`./src/app/funclib/funclib.cpp

stimfit-funclib.obj: ./src/app/funclib/funclib.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-funclib.obj -MD -MP -MF $(DEPDIR)/stimfit-funclib.Tpo -c -o stimfit-funclib.obj `if test -f './src/app/funclib/funclib.cpp'; then $(CYGPATH_W) './src/app/funclib/funclib.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/funclib/funclib.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-funclib.Tpo $(DEPDIR)/stimfit-funclib.Po
#	source='./src/app/funclib/funclib.cpp' object='stimfit-funclib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-funclib.obj `if test -f './src/app/funclib/funclib.cpp'; then $(CYGPATH_W) './src/app/funclib/funclib.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/funclib/funclib.cpp'; fi`

stimfit-usrdlg.o: ./src/app/usrdlg/usrdlg.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-usrdlg.o -MD -MP -MF $(DEPDIR)/stimfit-usrdlg.Tpo -c -o stimfit-usrdlg.o `test -f './src/app/usrdlg/usrdlg.cpp' || echo '$(srcdir)/'`./src/app/usrdlg/usrdlg.cpp
	mv -f $(DEPDIR)/stimfit-usrdlg.Tpo $(DEPDIR)/stimfit-usrdlg.Po
#	source='./src/app/usrdlg/usrdlg.cpp' object='stimfit-usrdlg.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-usrdlg.o `test -f './src/app/usrdlg/usrdlg.cpp' || echo '$(srcdir)/'`./src/app/usrdlg/usrdlg.cpp

stimfit-usrdlg.obj: ./src/app/usrdlg/usrdlg.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -MT stimfit-usrdlg.obj -MD -MP -MF $(DEPDIR)/stimfit-usrdlg.Tpo -c -o stimfit-usrdlg.obj `if test -f './src/app/usrdlg/usrdlg.cpp'; then $(CYGPATH_W) './src/app/usrdlg/usrdlg.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/usrdlg/usrdlg.cpp'; fi`
	mv -f $(DEPDIR)/stimfit-usrdlg.Tpo $(DEPDIR)/stimfit-usrdlg.Po
#	source='./src/app/usrdlg/usrdlg.cpp' object='stimfit-usrdlg.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(stimfit_CXXFLAGS) $(CXXFLAGS) -c -o stimfit-usrdlg.obj `if test -f './src/app/usrdlg/usrdlg.cpp'; then $(CYGPATH_W) './src/app/usrdlg/usrdlg.cpp'; else $(CYGPATH_W) '$(srcdir)/./src/app/usrdlg/usrdlg.cpp'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool config.lt

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.
$(RECURSIVE_TARGETS):
	@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

$(RECURSIVE_CLEAN_TARGETS):
	@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	rev=''; for subdir in $$list; do \
	  if test "$$subdir" = "."; then :; else \
	    rev="$$subdir $$rev"; \
	  fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done
ctags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) ctags); \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS: tags-recursive $(HEADERS) $(SOURCES) stfconf.h.in $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      tags="$$tags $$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	list='$(SOURCES) $(HEADERS) stfconf.h.in $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS: ctags-recursive $(HEADERS) $(SOURCES) stfconf.h.in $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	list='$(SOURCES) $(HEADERS) stfconf.h.in $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	$(am__remove_distdir)
	test -d $(distdir) || mkdir $(distdir)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
	list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -d "$(distdir)/$$subdir" \
	    || $(MKDIR_P) "$(distdir)/$$subdir" \
	    || exit 1; \
	    distdir=`$(am__cd) $(distdir) && pwd`; \
	    top_distdir=`$(am__cd) $(top_distdir) && pwd`; \
	    (cd $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$top_distdir" \
	        distdir="$$distdir/$$subdir" \
		am__remove_distdir=: \
		am__skip_length_check=: \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
	-find $(distdir) -type d ! -perm -777 -exec chmod a+rwx {} \; -o \
	  ! -type d ! -perm -444 -links 1 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -400 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -444 -exec $(install_sh) -c -m a+r {} {} \; \
	|| chmod -R a+r $(distdir)
dist-gzip: distdir
	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__remove_distdir)

dist-bzip2: distdir
	tardir=$(distdir) && $(am__tar) | bzip2 -9 -c >$(distdir).tar.bz2
	$(am__remove_distdir)

dist-lzma: distdir
	tardir=$(distdir) && $(am__tar) | lzma -9 -c >$(distdir).tar.lzma
	$(am__remove_distdir)

dist-tarZ: distdir
	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z
	$(am__remove_distdir)

dist-shar: distdir
	shar $(distdir) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).shar.gz
	$(am__remove_distdir)

dist-zip: distdir
	-rm -f $(distdir).zip
	zip -rq $(distdir).zip $(distdir)
	$(am__remove_distdir)

dist dist-all: distdir
	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__remove_distdir)

# This target untars the dist file and tries a VPATH configuration.  Then
# it guarantees that the distribution is self-contained by making another
# tarfile.
distcheck: dist
	case '$(DIST_ARCHIVES)' in \
	*.tar.gz*) \
	  GZIP=$(GZIP_ENV) gunzip -c $(distdir).tar.gz | $(am__untar) ;;\
	*.tar.bz2*) \
	  bunzip2 -c $(distdir).tar.bz2 | $(am__untar) ;;\
	*.tar.lzma*) \
	  unlzma -c $(distdir).tar.lzma | $(am__untar) ;;\
	*.tar.Z*) \
	  uncompress -c $(distdir).tar.Z | $(am__untar) ;;\
	*.shar.gz*) \
	  GZIP=$(GZIP_ENV) gunzip -c $(distdir).shar.gz | unshar ;;\
	*.zip*) \
	  unzip $(distdir).zip ;;\
	esac
	chmod -R a-w $(distdir); chmod a+w $(distdir)
	mkdir $(distdir)/_build
	mkdir $(distdir)/_inst
	chmod a-w $(distdir)
	dc_install_base=`$(am__cd) $(distdir)/_inst && pwd | sed -e 's,^[^:\\/]:[\\/],/,'` \
	  && dc_destdir="$${TMPDIR-/tmp}/am-dc-$$$$/" \
	  && cd $(distdir)/_build \
	  && ../configure --srcdir=.. --prefix="$$dc_install_base" \
	    $(DISTCHECK_CONFIGURE_FLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) dvi \
	  && $(MAKE) $(AM_MAKEFLAGS) check \
	  && $(MAKE) $(AM_MAKEFLAGS) install \
	  && $(MAKE) $(AM_MAKEFLAGS) installcheck \
	  && $(MAKE) $(AM_MAKEFLAGS) uninstall \
	  && $(MAKE) $(AM_MAKEFLAGS) distuninstallcheck_dir="$$dc_install_base" \
	        distuninstallcheck \
	  && chmod -R a-w "$$dc_install_base" \
	  && ({ \
	       (cd ../.. && umask 077 && mkdir "$$dc_destdir") \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" install \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" uninstall \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" \
	            distuninstallcheck_dir="$$dc_destdir" distuninstallcheck; \
	      } || { rm -rf "$$dc_destdir"; exit 1; }) \
	  && rm -rf "$$dc_destdir" \
	  && $(MAKE) $(AM_MAKEFLAGS) dist \
	  && rm -rf $(DIST_ARCHIVES) \
	  && $(MAKE) $(AM_MAKEFLAGS) distcleancheck
	$(am__remove_distdir)
	@(echo "$(distdir) archives ready for distribution: "; \
	  list='$(DIST_ARCHIVES)'; for i in $$list; do echo $$i; done) | \
	  sed -e 1h -e 1s/./=/g -e 1p -e 1x -e '$$p' -e '$$x'
distuninstallcheck:
	@cd $(distuninstallcheck_dir) \
	&& test `$(distuninstallcheck_listfiles) | wc -l` -le 1 \
	   || { echo "ERROR: files left after uninstall:" ; \
	        if test -n "$(DESTDIR)"; then \
	          echo "  (check DESTDIR support)"; \
	        fi ; \
	        $(distuninstallcheck_listfiles) ; \
	        exit 1; } >&2
distcleancheck: distclean
	@if test '$(srcdir)' = . ; then \
	  echo "ERROR: distcleancheck can only run from a VPATH build" ; \
	  exit 1 ; \
	fi
	@test `$(distcleancheck_listfiles) | wc -l` -eq 0 \
	  || { echo "ERROR: files left in build directory after distclean:" ; \
	       $(distcleancheck_listfiles) ; \
	       exit 1; } >&2
check-am: all-am
check: check-recursive
all-am: Makefile $(PROGRAMS) $(HEADERS) stfconf.h
installdirs: installdirs-recursive
installdirs-am:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-recursive

clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am

distclean: distclean-recursive
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-hdr distclean-libtool distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

info: info-recursive

info-am:

install-data-am:

install-dvi: install-dvi-recursive

install-exec-am: install-binPROGRAMS

install-html: install-html-recursive

install-info: install-info-recursive

install-man:

install-pdf: install-pdf-recursive

install-ps: install-ps-recursive

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -rf $(top_srcdir)/autom4te.cache
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) install-am \
	install-strip

.PHONY: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) CTAGS GTAGS \
	all all-am am--refresh check check-am clean clean-binPROGRAMS \
	clean-generic clean-libtool ctags ctags-recursive dist \
	dist-all dist-bzip2 dist-gzip dist-lzma dist-shar dist-tarZ \
	dist-zip distcheck distclean distclean-compile \
	distclean-generic distclean-hdr distclean-libtool \
	distclean-tags distcleancheck distdir distuninstallcheck dvi \
	dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	installdirs-am maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool pdf pdf-am ps ps-am tags tags-recursive \
	uninstall uninstall-am uninstall-binPROGRAMS


# wxMac resource fork/unbundled app
stimfit.app: stimfit
	mkdir -p stimfit.app/Contents
	mkdir -p stimfit.app/Contents/MacOS
	mkdir -p stimfit.app/Contents/Resources

	echo $(top_srcdir)/stimfit.plist.in >stimfit.app/Contents/Info.plist

	echo -n "APPL????" >stimfit.app/Contents/PkgInfo

	rm -f stimfit.app/Contents/MacOS/stimfit$(EXEEXT)
	cp -p -f .libs/stimfit$(EXEEXT) stimfit.app/Contents/MacOS/stimfit$(EXEEXT)
	$(POSTLINK_COMMAND) stimfit.app/Contents/MacOS/stimfit$(EXEEXT) \
	                    $(srcdir)/macosx/app.r
	$(MACSETFILE) -a C stimfit.app/Contents/MacOS/stimfit$(EXEEXT)

	cp -f $(top_srcdir)/macosx/wxmac.icns stimfit.app/Contents/Resources/wxmac.icns
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
